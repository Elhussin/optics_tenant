/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/accounting/accounts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_accounts_list"];
        put?: never;
        post: operations["accounting_accounts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounting/accounts/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_accounts_retrieve"];
        put: operations["accounting_accounts_update"];
        post?: never;
        delete: operations["accounting_accounts_destroy"];
        options?: never;
        head?: never;
        patch: operations["accounting_accounts_partial_update"];
        trace?: never;
    };
    "/api/accounting/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_categories_list"];
        put?: never;
        post: operations["accounting_categories_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounting/categories/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_categories_retrieve"];
        put: operations["accounting_categories_update"];
        post?: never;
        delete: operations["accounting_categories_destroy"];
        options?: never;
        head?: never;
        patch: operations["accounting_categories_partial_update"];
        trace?: never;
    };
    "/api/accounting/financial-periods/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_financial_periods_list"];
        put?: never;
        post: operations["accounting_financial_periods_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounting/financial-periods/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_financial_periods_retrieve"];
        put: operations["accounting_financial_periods_update"];
        post?: never;
        delete: operations["accounting_financial_periods_destroy"];
        options?: never;
        head?: never;
        patch: operations["accounting_financial_periods_partial_update"];
        trace?: never;
    };
    "/api/accounting/journal-entries/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_journal_entries_list"];
        put?: never;
        post: operations["accounting_journal_entries_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounting/journal-entries/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_journal_entries_retrieve"];
        put: operations["accounting_journal_entries_update"];
        post?: never;
        delete: operations["accounting_journal_entries_destroy"];
        options?: never;
        head?: never;
        patch: operations["accounting_journal_entries_partial_update"];
        trace?: never;
    };
    "/api/accounting/recurring-transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_recurring_transactions_list"];
        put?: never;
        post: operations["accounting_recurring_transactions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounting/recurring-transactions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_recurring_transactions_retrieve"];
        put: operations["accounting_recurring_transactions_update"];
        post?: never;
        delete: operations["accounting_recurring_transactions_destroy"];
        options?: never;
        head?: never;
        patch: operations["accounting_recurring_transactions_partial_update"];
        trace?: never;
    };
    "/api/accounting/taxes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_taxes_list"];
        put?: never;
        post: operations["accounting_taxes_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounting/taxes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_taxes_retrieve"];
        put: operations["accounting_taxes_update"];
        post?: never;
        delete: operations["accounting_taxes_destroy"];
        options?: never;
        head?: never;
        patch: operations["accounting_taxes_partial_update"];
        trace?: never;
    };
    "/api/accounting/transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_transactions_list"];
        put?: never;
        post: operations["accounting_transactions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounting/transactions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accounting_transactions_retrieve"];
        put: operations["accounting_transactions_update"];
        post?: never;
        delete: operations["accounting_transactions_destroy"];
        options?: never;
        head?: never;
        patch: operations["accounting_transactions_partial_update"];
        trace?: never;
    };
    "/api/branches/branch-users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["branches_branch_users_list"];
        put?: never;
        post: operations["branches_branch_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/branches/branch-users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["branches_branch_users_retrieve"];
        put: operations["branches_branch_users_update"];
        post?: never;
        delete: operations["branches_branch_users_destroy"];
        options?: never;
        head?: never;
        patch: operations["branches_branch_users_partial_update"];
        trace?: never;
    };
    "/api/branches/branches/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["branches_branches_list"];
        put?: never;
        post: operations["branches_branches_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/branches/branches/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["branches_branches_retrieve"];
        put: operations["branches_branches_update"];
        post?: never;
        delete: operations["branches_branches_destroy"];
        options?: never;
        head?: never;
        patch: operations["branches_branches_partial_update"];
        trace?: never;
    };
    "/api/core/import-csv/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["core_import_csv_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/campaigns/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_campaigns_list"];
        put?: never;
        post: operations["crm_campaigns_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/campaigns/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_campaigns_retrieve"];
        put: operations["crm_campaigns_update"];
        post?: never;
        delete: operations["crm_campaigns_destroy"];
        options?: never;
        head?: never;
        patch: operations["crm_campaigns_partial_update"];
        trace?: never;
    };
    "/api/crm/complaints/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_complaints_list"];
        put?: never;
        post: operations["crm_complaints_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/complaints/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_complaints_retrieve"];
        put: operations["crm_complaints_update"];
        post?: never;
        delete: operations["crm_complaints_destroy"];
        options?: never;
        head?: never;
        patch: operations["crm_complaints_partial_update"];
        trace?: never;
    };
    "/api/crm/contact-us/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_contact_us_list"];
        put?: never;
        post: operations["crm_contact_us_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/contact-us/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_contact_us_retrieve"];
        put: operations["crm_contact_us_update"];
        post?: never;
        delete: operations["crm_contact_us_destroy"];
        options?: never;
        head?: never;
        patch: operations["crm_contact_us_partial_update"];
        trace?: never;
    };
    "/api/crm/customer-groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_customer_groups_list"];
        put?: never;
        post: operations["crm_customer_groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/customer-groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_customer_groups_retrieve"];
        put: operations["crm_customer_groups_update"];
        post?: never;
        delete: operations["crm_customer_groups_destroy"];
        options?: never;
        head?: never;
        patch: operations["crm_customer_groups_partial_update"];
        trace?: never;
    };
    "/api/crm/customers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_customers_list"];
        put?: never;
        post: operations["crm_customers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/customers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_customers_retrieve"];
        put: operations["crm_customers_update"];
        post?: never;
        delete: operations["crm_customers_destroy"];
        options?: never;
        head?: never;
        patch: operations["crm_customers_partial_update"];
        trace?: never;
    };
    "/api/crm/documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_documents_list"];
        put?: never;
        post: operations["crm_documents_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/documents/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_documents_retrieve"];
        put: operations["crm_documents_update"];
        post?: never;
        delete: operations["crm_documents_destroy"];
        options?: never;
        head?: never;
        patch: operations["crm_documents_partial_update"];
        trace?: never;
    };
    "/api/crm/interactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_interactions_list"];
        put?: never;
        post: operations["crm_interactions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/interactions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_interactions_retrieve"];
        put: operations["crm_interactions_update"];
        post?: never;
        delete: operations["crm_interactions_destroy"];
        options?: never;
        head?: never;
        patch: operations["crm_interactions_partial_update"];
        trace?: never;
    };
    "/api/crm/opportunities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_opportunities_list"];
        put?: never;
        post: operations["crm_opportunities_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/opportunities/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_opportunities_retrieve"];
        put: operations["crm_opportunities_update"];
        post?: never;
        delete: operations["crm_opportunities_destroy"];
        options?: never;
        head?: never;
        patch: operations["crm_opportunities_partial_update"];
        trace?: never;
    };
    "/api/crm/subscriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_subscriptions_list"];
        put?: never;
        post: operations["crm_subscriptions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/subscriptions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_subscriptions_retrieve"];
        put: operations["crm_subscriptions_update"];
        post?: never;
        delete: operations["crm_subscriptions_destroy"];
        options?: never;
        head?: never;
        patch: operations["crm_subscriptions_partial_update"];
        trace?: never;
    };
    "/api/crm/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_tasks_list"];
        put?: never;
        post: operations["crm_tasks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/crm/tasks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["crm_tasks_retrieve"];
        put: operations["crm_tasks_update"];
        post?: never;
        delete: operations["crm_tasks_destroy"];
        options?: never;
        head?: never;
        patch: operations["crm_tasks_partial_update"];
        trace?: never;
    };
    "/api/hrm/attendances/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_attendances_list"];
        put?: never;
        post: operations["hrm_attendances_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hrm/attendances/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_attendances_retrieve"];
        put: operations["hrm_attendances_update"];
        post?: never;
        delete: operations["hrm_attendances_destroy"];
        options?: never;
        head?: never;
        patch: operations["hrm_attendances_partial_update"];
        trace?: never;
    };
    "/api/hrm/departments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_departments_list"];
        put?: never;
        post: operations["hrm_departments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hrm/departments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_departments_retrieve"];
        put: operations["hrm_departments_update"];
        post?: never;
        delete: operations["hrm_departments_destroy"];
        options?: never;
        head?: never;
        patch: operations["hrm_departments_partial_update"];
        trace?: never;
    };
    "/api/hrm/employee-form-options/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_employee_form_options_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hrm/employees/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_employees_list"];
        put?: never;
        post: operations["hrm_employees_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hrm/employees/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_employees_retrieve"];
        put: operations["hrm_employees_update"];
        post?: never;
        delete: operations["hrm_employees_destroy"];
        options?: never;
        head?: never;
        patch: operations["hrm_employees_partial_update"];
        trace?: never;
    };
    "/api/hrm/leaves/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_leaves_list"];
        put?: never;
        post: operations["hrm_leaves_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hrm/leaves/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_leaves_retrieve"];
        put: operations["hrm_leaves_update"];
        post?: never;
        delete: operations["hrm_leaves_destroy"];
        options?: never;
        head?: never;
        patch: operations["hrm_leaves_partial_update"];
        trace?: never;
    };
    "/api/hrm/notifications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_notifications_list"];
        put?: never;
        post: operations["hrm_notifications_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hrm/notifications/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_notifications_retrieve"];
        put: operations["hrm_notifications_update"];
        post?: never;
        delete: operations["hrm_notifications_destroy"];
        options?: never;
        head?: never;
        patch: operations["hrm_notifications_partial_update"];
        trace?: never;
    };
    "/api/hrm/payrolls/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_payrolls_list"];
        put?: never;
        post: operations["hrm_payrolls_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hrm/payrolls/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_payrolls_retrieve"];
        put: operations["hrm_payrolls_update"];
        post?: never;
        delete: operations["hrm_payrolls_destroy"];
        options?: never;
        head?: never;
        patch: operations["hrm_payrolls_partial_update"];
        trace?: never;
    };
    "/api/hrm/performance-reviews/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_performance_reviews_list"];
        put?: never;
        post: operations["hrm_performance_reviews_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hrm/performance-reviews/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_performance_reviews_retrieve"];
        put: operations["hrm_performance_reviews_update"];
        post?: never;
        delete: operations["hrm_performance_reviews_destroy"];
        options?: never;
        head?: never;
        patch: operations["hrm_performance_reviews_partial_update"];
        trace?: never;
    };
    "/api/hrm/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_tasks_list"];
        put?: never;
        post: operations["hrm_tasks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/hrm/tasks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["hrm_tasks_retrieve"];
        put: operations["hrm_tasks_update"];
        post?: never;
        delete: operations["hrm_tasks_destroy"];
        options?: never;
        head?: never;
        patch: operations["hrm_tasks_partial_update"];
        trace?: never;
    };
    "/api/prescriptions/prescription/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["prescriptions_prescription_list"];
        put?: never;
        post: operations["prescriptions_prescription_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prescriptions/prescription/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["prescriptions_prescription_retrieve"];
        put: operations["prescriptions_prescription_update"];
        post?: never;
        delete: operations["prescriptions_prescription_destroy"];
        options?: never;
        head?: never;
        patch: operations["prescriptions_prescription_partial_update"];
        trace?: never;
    };
    "/api/products/answers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_answers_list"];
        put?: never;
        post: operations["products_answers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/answers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_answers_retrieve"];
        put: operations["products_answers_update"];
        post?: never;
        delete: operations["products_answers_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_answers_partial_update"];
        trace?: never;
    };
    "/api/products/attribute-values/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_attribute_values_list"];
        put?: never;
        post: operations["products_attribute_values_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/attribute-values/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_attribute_values_retrieve"];
        put: operations["products_attribute_values_update"];
        post?: never;
        delete: operations["products_attribute_values_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_attribute_values_partial_update"];
        trace?: never;
    };
    "/api/products/attributes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_attributes_list"];
        put?: never;
        post: operations["products_attributes_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/attributes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_attributes_retrieve"];
        put: operations["products_attributes_update"];
        post?: never;
        delete: operations["products_attributes_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_attributes_partial_update"];
        trace?: never;
    };
    "/api/products/brands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_brands_list"];
        put?: never;
        post: operations["products_brands_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/brands/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_brands_retrieve"];
        put: operations["products_brands_update"];
        post?: never;
        delete: operations["products_brands_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_brands_partial_update"];
        trace?: never;
    };
    "/api/products/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_categories_list"];
        put?: never;
        post: operations["products_categories_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/categories/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_categories_retrieve"];
        put: operations["products_categories_update"];
        post?: never;
        delete: operations["products_categories_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_categories_partial_update"];
        trace?: never;
    };
    "/api/products/flexible-prices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_flexible_prices_list"];
        put?: never;
        post: operations["products_flexible_prices_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/flexible-prices/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_flexible_prices_retrieve"];
        put: operations["products_flexible_prices_update"];
        post?: never;
        delete: operations["products_flexible_prices_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_flexible_prices_partial_update"];
        trace?: never;
    };
    "/api/products/lens-coatings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_lens_coatings_list"];
        put?: never;
        post: operations["products_lens_coatings_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/lens-coatings/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_lens_coatings_retrieve"];
        put: operations["products_lens_coatings_update"];
        post?: never;
        delete: operations["products_lens_coatings_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_lens_coatings_partial_update"];
        trace?: never;
    };
    "/api/products/manufacturers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_manufacturers_list"];
        put?: never;
        post: operations["products_manufacturers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/manufacturers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_manufacturers_retrieve"];
        put: operations["products_manufacturers_update"];
        post?: never;
        delete: operations["products_manufacturers_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_manufacturers_partial_update"];
        trace?: never;
    };
    "/api/products/marketing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_marketing_list"];
        put?: never;
        post: operations["products_marketing_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/marketing/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_marketing_retrieve"];
        put: operations["products_marketing_update"];
        post?: never;
        delete: operations["products_marketing_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_marketing_partial_update"];
        trace?: never;
    };
    "/api/products/offers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_offers_list"];
        put?: never;
        post: operations["products_offers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/offers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_offers_retrieve"];
        put: operations["products_offers_update"];
        post?: never;
        delete: operations["products_offers_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_offers_partial_update"];
        trace?: never;
    };
    "/api/products/product-images/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_product_images_list"];
        put?: never;
        post: operations["products_product_images_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/product-images/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_product_images_retrieve"];
        put: operations["products_product_images_update"];
        post?: never;
        delete: operations["products_product_images_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_product_images_partial_update"];
        trace?: never;
    };
    "/api/products/products/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_products_list"];
        put?: never;
        post: operations["products_products_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/products/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_products_retrieve"];
        put: operations["products_products_update"];
        post?: never;
        delete: operations["products_products_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_products_partial_update"];
        trace?: never;
    };
    "/api/products/questions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_questions_list"];
        put?: never;
        post: operations["products_questions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/questions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_questions_retrieve"];
        put: operations["products_questions_update"];
        post?: never;
        delete: operations["products_questions_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_questions_partial_update"];
        trace?: never;
    };
    "/api/products/reviews/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_reviews_list"];
        put?: never;
        post: operations["products_reviews_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/reviews/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_reviews_retrieve"];
        put: operations["products_reviews_update"];
        post?: never;
        delete: operations["products_reviews_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_reviews_partial_update"];
        trace?: never;
    };
    "/api/products/stock-movements/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_stock_movements_list"];
        put?: never;
        post: operations["products_stock_movements_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/stock-movements/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_stock_movements_retrieve"];
        put: operations["products_stock_movements_update"];
        post?: never;
        delete: operations["products_stock_movements_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_stock_movements_partial_update"];
        trace?: never;
    };
    "/api/products/stock-transfer-items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_stock_transfer_items_list"];
        put?: never;
        post: operations["products_stock_transfer_items_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/stock-transfer-items/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_stock_transfer_items_retrieve"];
        put: operations["products_stock_transfer_items_update"];
        post?: never;
        delete: operations["products_stock_transfer_items_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_stock_transfer_items_partial_update"];
        trace?: never;
    };
    "/api/products/stock-transfers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_stock_transfers_list"];
        put?: never;
        post: operations["products_stock_transfers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/stock-transfers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_stock_transfers_retrieve"];
        put: operations["products_stock_transfers_update"];
        post?: never;
        delete: operations["products_stock_transfers_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_stock_transfers_partial_update"];
        trace?: never;
    };
    "/api/products/stocks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_stocks_list"];
        put?: never;
        post: operations["products_stocks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/stocks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_stocks_retrieve"];
        put: operations["products_stocks_update"];
        post?: never;
        delete: operations["products_stocks_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_stocks_partial_update"];
        trace?: never;
    };
    "/api/products/suppliers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_suppliers_list"];
        put?: never;
        post: operations["products_suppliers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/suppliers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_suppliers_retrieve"];
        put: operations["products_suppliers_update"];
        post?: never;
        delete: operations["products_suppliers_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_suppliers_partial_update"];
        trace?: never;
    };
    "/api/products/variants/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_variants_list"];
        put?: never;
        post: operations["products_variants_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/variants/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["products_variants_retrieve"];
        put: operations["products_variants_update"];
        post?: never;
        delete: operations["products_variants_destroy"];
        options?: never;
        head?: never;
        patch: operations["products_variants_partial_update"];
        trace?: never;
    };
    "/api/sales/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_invoices_list"];
        put?: never;
        post: operations["sales_invoices_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sales/invoices/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_invoices_retrieve"];
        put: operations["sales_invoices_update"];
        post?: never;
        delete: operations["sales_invoices_destroy"];
        options?: never;
        head?: never;
        patch: operations["sales_invoices_partial_update"];
        trace?: never;
    };
    "/api/sales/invoices/{id}/calculate_totals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sales_invoices_calculate_totals_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sales/invoices/{id}/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sales_invoices_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sales/invoices/choices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_invoices_choices_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sales/orders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_orders_list"];
        put?: never;
        post: operations["sales_orders_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sales/orders/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_orders_retrieve"];
        put: operations["sales_orders_update"];
        post?: never;
        delete: operations["sales_orders_destroy"];
        options?: never;
        head?: never;
        patch: operations["sales_orders_partial_update"];
        trace?: never;
    };
    "/api/sales/orders/{id}/calculate_totals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sales_orders_calculate_totals_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sales/orders/{id}/cancel/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sales_orders_cancel_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sales/orders/{id}/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sales_orders_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sales/orders/choices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_orders_choices_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sales/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_payments_list"];
        put?: never;
        post: operations["sales_payments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sales/payments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_payments_retrieve"];
        put: operations["sales_payments_update"];
        post?: never;
        delete: operations["sales_payments_destroy"];
        options?: never;
        head?: never;
        patch: operations["sales_payments_partial_update"];
        trace?: never;
    };
    "/api/tenants/activate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Main algorithm execution with improved flow control */
        get: operations["tenants_activate_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/clients/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tenants_clients_list"];
        put?: never;
        post: operations["tenants_clients_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/clients/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tenants_clients_retrieve"];
        put: operations["tenants_clients_update"];
        post?: never;
        delete: operations["tenants_clients_destroy"];
        options?: never;
        head?: never;
        patch: operations["tenants_clients_partial_update"];
        trace?: never;
    };
    "/api/tenants/create-payment-order/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["tenants_create_payment_order_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/domain/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tenants_domain_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tenants_payments_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/paypal/cancel/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tenants_paypal_cancel_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/paypal/execute/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["tenants_paypal_execute_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/paypal/webhook/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["tenants_paypal_webhook_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["tenants_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/subscription-plans/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tenants_subscription_plans_list"];
        put?: never;
        post: operations["tenants_subscription_plans_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/subscription-plans/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tenants_subscription_plans_retrieve"];
        put: operations["tenants_subscription_plans_update"];
        post?: never;
        delete: operations["tenants_subscription_plans_destroy"];
        options?: never;
        head?: never;
        patch: operations["tenants_subscription_plans_partial_update"];
        trace?: never;
    };
    "/api/users/contact-us/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_contact_us_list"];
        put?: never;
        post: operations["users_contact_us_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/contact-us/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_contact_us_retrieve"];
        put: operations["users_contact_us_update"];
        post?: never;
        delete: operations["users_contact_us_destroy"];
        options?: never;
        head?: never;
        patch: operations["users_contact_us_partial_update"];
        trace?: never;
    };
    "/api/users/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Login endpoint for users */
        post: operations["users_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logout endpoint for users */
        post: operations["users_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_pages_list"];
        put?: never;
        post: operations["users_pages_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/pages/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_pages_retrieve"];
        put: operations["users_pages_update"];
        post?: never;
        delete: operations["users_pages_destroy"];
        options?: never;
        head?: never;
        patch: operations["users_pages_partial_update"];
        trace?: never;
    };
    "/api/users/password-reset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Request password reset */
        post: operations["users_password_reset_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/password-reset-confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["users_password_reset_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/permissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_permissions_list"];
        put?: never;
        post: operations["users_permissions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/permissions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_permissions_retrieve"];
        put: operations["users_permissions_update"];
        post?: never;
        delete: operations["users_permissions_destroy"];
        options?: never;
        head?: never;
        patch: operations["users_permissions_partial_update"];
        trace?: never;
    };
    "/api/users/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current authenticated user profile data */
        get: operations["users_profile_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/public/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description For public pages only */
        get: operations["users_public_pages_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/public/pages/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description For public pages only */
        get: operations["users_public_pages_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Register endpoint for users */
        post: operations["users_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/role-permissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_role_permissions_list"];
        put?: never;
        post: operations["users_role_permissions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/role-permissions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_role_permissions_retrieve"];
        put: operations["users_role_permissions_update"];
        post?: never;
        delete: operations["users_role_permissions_destroy"];
        options?: never;
        head?: never;
        patch: operations["users_role_permissions_partial_update"];
        trace?: never;
    };
    "/api/users/roles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_roles_list"];
        put?: never;
        post: operations["users_roles_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/roles/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_roles_retrieve"];
        put: operations["users_roles_update"];
        post?: never;
        delete: operations["users_roles_destroy"];
        options?: never;
        head?: never;
        patch: operations["users_roles_partial_update"];
        trace?: never;
    };
    "/api/users/tenant-settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_tenant_settings_list"];
        put?: never;
        post: operations["users_tenant_settings_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/tenant-settings/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_tenant_settings_retrieve"];
        put: operations["users_tenant_settings_update"];
        post?: never;
        delete: operations["users_tenant_settings_destroy"];
        options?: never;
        head?: never;
        patch: operations["users_tenant_settings_partial_update"];
        trace?: never;
    };
    "/api/users/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["users_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_users_list"];
        put?: never;
        post: operations["users_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_users_retrieve"];
        put: operations["users_users_update"];
        post?: never;
        delete: operations["users_users_destroy"];
        options?: never;
        head?: never;
        patch: operations["users_users_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Account: {
            readonly id: number;
            name: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            currency?: components["schemas"]["AccountCurrencyEnum"];
            user: number;
        };
        /**
         * @description * `USD` - USD
         *     * `EUR` - EUR
         *     * `SAR` - SAR
         * @enum {string}
         */
        AccountCurrencyEnum: "USD" | "EUR" | "SAR";
        AccountRequest: {
            name: string;
            currency?: components["schemas"]["AccountCurrencyEnum"];
            user: number;
        };
        /**
         * @description * `+00.25` - +00.25
         *     * `+00.50` - +00.50
         *     * `+00.75` - +00.75
         *     * `+01.00` - +01.00
         *     * `+01.25` - +01.25
         *     * `+01.50` - +01.50
         *     * `+01.75` - +01.75
         *     * `+02.00` - +02.00
         *     * `+02.25` - +02.25
         *     * `+02.50` - +02.50
         *     * `+02.75` - +02.75
         *     * `+03.00` - +03.00
         *     * `+03.25` - +03.25
         *     * `+03.50` - +03.50
         *     * `+03.75` - +03.75
         *     * `+04.00` - +04.00
         *     * `+04.25` - +04.25
         *     * `+04.50` - +04.50
         *     * `+04.75` - +04.75
         *     * `+05.00` - +05.00
         *     * `+05.25` - +05.25
         *     * `+05.50` - +05.50
         *     * `+05.75` - +05.75
         *     * `+06.00` - +06.00
         * @enum {string}
         */
        AdditionEnum: "+00.25" | "+00.50" | "+00.75" | "+01.00" | "+01.25" | "+01.50" | "+01.75" | "+02.00" | "+02.25" | "+02.50" | "+02.75" | "+03.00" | "+03.25" | "+03.50" | "+03.75" | "+04.00" | "+04.25" | "+04.50" | "+04.75" | "+05.00" | "+05.25" | "+05.50" | "+05.75" | "+06.00";
        /**
         * @description * `adult` - Adult
         *     * `child` - Child
         *     * `senior` - Senior
         * @enum {string}
         */
        AgeGroupEnum: "adult" | "child" | "senior";
        Attendance: {
            readonly id: number;
            /** Format: date */
            date: string;
            /** Format: double */
            hours_worked?: number | null;
            /** Format: time */
            check_in?: string | null;
            /** Format: time */
            check_out?: string | null;
            employee: number;
        };
        AttendanceRequest: {
            /** Format: date */
            date: string;
            /** Format: double */
            hours_worked?: number | null;
            /** Format: time */
            check_in?: string | null;
            /** Format: time */
            check_out?: string | null;
            employee: number;
        };
        AttributeValue: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            value: string;
            attribute: number;
        };
        AttributeValueRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            value: string;
            attribute: number;
        };
        Attributes: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
        };
        AttributesRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
        };
        /** @enum {unknown} */
        BlankEnum: "";
        Branch: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            readonly branch_code: string;
            branch_type: components["schemas"]["BranchTypeEnum"];
            country?: string;
            city?: string;
            address?: string;
            phone?: string;
            /** Format: email */
            email?: string;
            is_main_branch?: boolean;
            allows_online_orders?: boolean;
            operating_hours?: unknown;
        };
        BranchRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            branch_type: components["schemas"]["BranchTypeEnum"];
            country?: string;
            city?: string;
            address?: string;
            phone?: string;
            /** Format: email */
            email?: string;
            is_main_branch?: boolean;
            allows_online_orders?: boolean;
            operating_hours?: unknown;
        };
        /**
         * @description * `store` - Store
         *     * `branch` - Branch
         * @enum {string}
         */
        BranchTypeEnum: "store" | "branch";
        BranchUsers: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            status?: boolean;
            notes?: string | null;
            branch_id: number;
            employee_id: number;
        };
        BranchUsersRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            status?: boolean;
            notes?: string | null;
            branch_id: number;
            employee_id: number;
        };
        Brand: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            country?: string;
            /** Format: uri */
            website?: string;
            description?: string;
            /** Format: uri */
            logo?: string | null;
        };
        BrandRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            country?: string;
            /** Format: uri */
            website?: string;
            description?: string;
            /** Format: binary */
            logo?: string | null;
        };
        Campaign: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            description: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            customers?: number[];
        };
        CampaignRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            description: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            customers?: number[];
        };
        Category: {
            readonly id: number;
            name: string;
            category_type: components["schemas"]["TransactionTypeEnum"];
            description?: string | null;
            parent?: number | null;
        };
        CategoryRequest: {
            name: string;
            category_type: components["schemas"]["TransactionTypeEnum"];
            description?: string | null;
            parent?: number | null;
        };
        Client: {
            readonly id: number;
            /** Company Name */
            name: string;
            max_users?: number;
            max_products?: number;
            max_branches?: number;
            /** Format: date */
            paid_until?: string | null;
            on_trial?: boolean;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: uuid */
            readonly uuid: string;
            /** Format: date-time */
            readonly created_at: string;
            readonly plans: components["schemas"]["SubscriptionPlan"];
            readonly is_paid: string;
            readonly is_plan_expired: string;
            readonly field_labels: string;
        };
        ClientRequest: {
            /** Company Name */
            name: string;
            max_users?: number;
            max_products?: number;
            max_branches?: number;
            /** Format: date */
            paid_until?: string | null;
            on_trial?: boolean;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
        };
        Complaint: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            description: string;
            status?: components["schemas"]["ComplaintStatusEnum"];
            customer: number;
        };
        ComplaintRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            description: string;
            status?: components["schemas"]["ComplaintStatusEnum"];
            customer: number;
        };
        /**
         * @description * `open` - Open
         *     * `resolved` - Resolved
         * @enum {string}
         */
        ComplaintStatusEnum: "open" | "resolved";
        Contact: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: email */
            email: string;
            phone: string;
            name: string;
            message: string;
        };
        ContactRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: email */
            email: string;
            phone: string;
            name: string;
            message: string;
        };
        ContactUs: {
            /** Format: email */
            email: string;
            phone: string;
            name: string;
            message: string;
        };
        ContactUsRequest: {
            /** Format: email */
            email: string;
            phone: string;
            name: string;
            message: string;
        };
        Customer: {
            readonly id: number;
            phone?: string;
            /** @description Enter a valid identification number 10 digits. */
            identification_number: string;
            first_name?: string;
            last_name?: string;
            /** Format: email */
            email?: string;
            customer_type?: components["schemas"]["CustomerTypeEnum"];
            is_vip?: boolean | null;
            accepts_marketing?: boolean;
            registration_number?: string | null;
            tax_number?: string | null;
            preferred_contact?: components["schemas"]["PreferredContactEnum"];
            /** Format: uri */
            website?: string | null;
            description?: string | null;
            address_line1?: string;
            address_line2?: string;
            city?: string;
            postal_code?: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
        };
        CustomerGroup: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            description?: string;
            customers: number[];
        };
        CustomerGroupRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            description?: string;
            customers: number[];
        };
        CustomerRequest: {
            phone?: string;
            /** @description Enter a valid identification number 10 digits. */
            identification_number: string;
            first_name?: string;
            last_name?: string;
            /** Format: email */
            email?: string;
            customer_type?: components["schemas"]["CustomerTypeEnum"];
            is_vip?: boolean | null;
            accepts_marketing?: boolean;
            registration_number?: string | null;
            tax_number?: string | null;
            preferred_contact?: components["schemas"]["PreferredContactEnum"];
            /** Format: uri */
            website?: string | null;
            description?: string | null;
            address_line1?: string;
            address_line2?: string;
            city?: string;
            postal_code?: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
        };
        /**
         * @description * `individual` - Individual
         *     * `company` - Company
         *     * `agent` - Agent
         *     * `supplier` - Supplier
         * @enum {string}
         */
        CustomerTypeEnum: "individual" | "company" | "agent" | "supplier";
        /**
         * @description * `-15.00` - -15.00
         *     * `-14.75` - -14.75
         *     * `-14.50` - -14.50
         *     * `-14.25` - -14.25
         *     * `-14.00` - -14.00
         *     * `-13.75` - -13.75
         *     * `-13.50` - -13.50
         *     * `-13.25` - -13.25
         *     * `-13.00` - -13.00
         *     * `-12.75` - -12.75
         *     * `-12.50` - -12.50
         *     * `-12.25` - -12.25
         *     * `-12.00` - -12.00
         *     * `-11.75` - -11.75
         *     * `-11.50` - -11.50
         *     * `-11.25` - -11.25
         *     * `-11.00` - -11.00
         *     * `-10.75` - -10.75
         *     * `-10.50` - -10.50
         *     * `-10.25` - -10.25
         *     * `-10.00` - -10.00
         *     * `-09.75` - -09.75
         *     * `-09.50` - -09.50
         *     * `-09.25` - -09.25
         *     * `-09.00` - -09.00
         *     * `-08.75` - -08.75
         *     * `-08.50` - -08.50
         *     * `-08.25` - -08.25
         *     * `-08.00` - -08.00
         *     * `-07.75` - -07.75
         *     * `-07.50` - -07.50
         *     * `-07.25` - -07.25
         *     * `-07.00` - -07.00
         *     * `-06.75` - -06.75
         *     * `-06.50` - -06.50
         *     * `-06.25` - -06.25
         *     * `-06.00` - -06.00
         *     * `-05.75` - -05.75
         *     * `-05.50` - -05.50
         *     * `-05.25` - -05.25
         *     * `-05.00` - -05.00
         *     * `-04.75` - -04.75
         *     * `-04.50` - -04.50
         *     * `-04.25` - -04.25
         *     * `-04.00` - -04.00
         *     * `-03.75` - -03.75
         *     * `-03.50` - -03.50
         *     * `-03.25` - -03.25
         *     * `-03.00` - -03.00
         *     * `-02.75` - -02.75
         *     * `-02.50` - -02.50
         *     * `-02.25` - -02.25
         *     * `-02.00` - -02.00
         *     * `-01.75` - -01.75
         *     * `-01.50` - -01.50
         *     * `-01.25` - -01.25
         *     * `-01.00` - -01.00
         *     * `-00.75` - -00.75
         *     * `-00.50` - -00.50
         *     * `-00.25` - -00.25
         *     * `-00.00` - -00.00
         * @enum {string}
         */
        CylinderEnum: "-15.00" | "-14.75" | "-14.50" | "-14.25" | "-14.00" | "-13.75" | "-13.50" | "-13.25" | "-13.00" | "-12.75" | "-12.50" | "-12.25" | "-12.00" | "-11.75" | "-11.50" | "-11.25" | "-11.00" | "-10.75" | "-10.50" | "-10.25" | "-10.00" | "-09.75" | "-09.50" | "-09.25" | "-09.00" | "-08.75" | "-08.50" | "-08.25" | "-08.00" | "-07.75" | "-07.50" | "-07.25" | "-07.00" | "-06.75" | "-06.50" | "-06.25" | "-06.00" | "-05.75" | "-05.50" | "-05.25" | "-05.00" | "-04.75" | "-04.50" | "-04.25" | "-04.00" | "-03.75" | "-03.50" | "-03.25" | "-03.00" | "-02.75" | "-02.50" | "-02.25" | "-02.00" | "-01.75" | "-01.50" | "-01.25" | "-01.00" | "-00.75" | "-00.50" | "-00.25" | "-00.00";
        /**
         * @description * `en` - English
         *     * `ar` - Arabic
         * @enum {string}
         */
        DefaultLanguageEnum: "en" | "ar";
        Department: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            description?: string | null;
            location?: string | null;
        };
        DepartmentRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            description?: string | null;
            location?: string | null;
        };
        Document: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title: string;
            /** Format: uri */
            file: string;
            customer?: number | null;
        };
        DocumentRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title: string;
            /** Format: binary */
            file: string;
            customer?: number | null;
        };
        Employee: {
            readonly id: number;
            user_id: number;
            department_id?: number | null;
            position?: components["schemas"]["PositionEnum"];
            /** Format: decimal */
            salary?: string;
            phone?: string;
            /** Format: date */
            hire_date?: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        EmployeeRequest: {
            user_id: number;
            department_id?: number | null;
            position?: components["schemas"]["PositionEnum"];
            /** Format: decimal */
            salary?: string;
            phone?: string;
            /** Format: date */
            hire_date?: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
        };
        FinancialPeriod: {
            readonly id: number;
            name: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            is_closed?: boolean;
        };
        FinancialPeriodRequest: {
            name: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            is_closed?: boolean;
        };
        FlexiblePrice: {
            readonly id: number;
            variant: number;
            customer: number | null;
            readonly customer_group: components["schemas"]["CustomerGroup"];
            readonly branch: components["schemas"]["Branch"];
            /** Format: decimal */
            special_price: string;
            /** Format: date */
            start_date?: string | null;
            /** Format: date */
            end_date?: string | null;
            min_quantity?: number;
            currency?: string;
            priority?: number;
        };
        FlexiblePriceRequest: {
            variant: number;
            customer: number | null;
            customer_group_id: number | null;
            branch_id: number | null;
            /** Format: decimal */
            special_price: string;
            /** Format: date */
            start_date?: string | null;
            /** Format: date */
            end_date?: string | null;
            min_quantity?: number;
            currency?: string;
            priority?: number;
        };
        /**
         * @description * `unisex` - Unisex
         *     * `men` - Men
         *     * `women` - Women
         *     * `kids` - Kids
         * @enum {string}
         */
        GenderEnum: "unisex" | "men" | "women" | "kids";
        Interaction: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            interaction_type: components["schemas"]["InteractionTypeEnum"];
            notes?: string | null;
            customer: number;
        };
        InteractionRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            interaction_type: components["schemas"]["InteractionTypeEnum"];
            notes?: string | null;
            customer: number;
        };
        /**
         * @description * `call` - Call
         *     * `email` - Email
         *     * `meeting` - Meeting
         * @enum {string}
         */
        InteractionTypeEnum: "call" | "email" | "meeting";
        /**
         * @description * `monthly` - Monthly
         *     * `yearly` - Yearly
         * @enum {string}
         */
        IntervalEnum: "monthly" | "yearly";
        Invoice: {
            readonly id: number;
            items: components["schemas"]["InvoiceItem"][];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            readonly subtotal: string;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            readonly tax_amount: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            readonly total_amount: string;
            /** Format: decimal */
            paid_amount?: string;
            readonly invoice_number: string;
            invoice_type?: components["schemas"]["InvoiceTypeEnum"];
            /** Format: date */
            due_date?: string | null;
            readonly status: components["schemas"]["InvoiceStatusEnum"];
            notes?: string | null;
            branch?: number | null;
            customer: number;
            readonly created_by: number | null;
            order?: number | null;
        };
        InvoiceItem: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity?: number;
            /** Format: decimal */
            unit_price: string;
            /** Format: decimal */
            readonly total_price: string;
            product_variant?: number | null;
            invoice: number;
        };
        InvoiceItemRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity?: number;
            /** Format: decimal */
            unit_price: string;
            product_variant?: number | null;
            invoice: number;
        };
        InvoiceRequest: {
            items: components["schemas"]["InvoiceItemRequest"][];
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            paid_amount?: string;
            invoice_type?: components["schemas"]["InvoiceTypeEnum"];
            /** Format: date */
            due_date?: string | null;
            notes?: string | null;
            branch?: number | null;
            customer: number;
            order?: number | null;
        };
        /**
         * @description * `draft` - Draft
         *     * `paid` - Paid
         *     * `partially_paid` - Partially Paid
         *     * `overdue` - Overdue
         *     * `confirmed` - Confirmed
         * @enum {string}
         */
        InvoiceStatusEnum: "draft" | "paid" | "partially_paid" | "overdue" | "confirmed";
        /**
         * @description * `purchase` - Purchase
         *     * `sale` - Sale
         *     * `return_purchase` - Return Purchase
         *     * `return_sale` - Return Sale
         * @enum {string}
         */
        InvoiceTypeEnum: "purchase" | "sale" | "return_purchase" | "return_sale";
        JournalEntry: {
            readonly id: number;
            readonly debit_currency: string;
            /** Format: decimal */
            debit: string;
            readonly credit_currency: string;
            /** Format: decimal */
            credit: string;
            transaction: number;
            account: number;
        };
        JournalEntryRequest: {
            /** Format: decimal */
            debit: string;
            /** Format: decimal */
            credit: string;
            transaction: number;
            account: number;
        };
        /**
         * @description * `en` - English
         *     * `ar` - Arabic
         * @enum {string}
         */
        LanguageEnum: "en" | "ar";
        Leave: {
            readonly id: number;
            leave_type: components["schemas"]["LeaveTypeEnum"];
            /** Format: date */
            readonly start_date: string;
            /** Format: date */
            end_date?: string | null;
            status?: components["schemas"]["LeaveStatusEnum"];
            employee: number;
        };
        LeaveRequest: {
            leave_type: components["schemas"]["LeaveTypeEnum"];
            /** Format: date */
            end_date?: string | null;
            status?: components["schemas"]["LeaveStatusEnum"];
            employee: number;
        };
        /**
         * @description * `pending` - Pending
         *     * `approved` - Approved
         *     * `rejected` - Rejected
         * @enum {string}
         */
        LeaveStatusEnum: "pending" | "approved" | "rejected";
        /**
         * @description * `sick` - Sick Leave
         *     * `vacation` - Vacation Leave
         *     * `personal` - Personal Leave
         * @enum {string}
         */
        LeaveTypeEnum: "sick" | "vacation" | "personal";
        LensCoating: {
            readonly id: number;
            name: string;
            description?: string;
            /** Active */
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        LensCoatingRequest: {
            name: string;
            description?: string;
            /** Active */
            is_active?: boolean;
        };
        LoginBadRequest: {
            username?: string[];
            password?: string[];
        };
        LoginForbidden: {
            detail: string;
        };
        LoginRequest: {
            username: string;
            password: string;
        };
        LoginSuccessResponse: {
            msg: string;
        };
        LogoutResponse: {
            msg: string;
        };
        Manufacturer: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            country?: string;
            /** Format: uri */
            website?: string;
            /** Format: email */
            email?: string;
            phone?: string;
        };
        ManufacturerRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            country?: string;
            /** Format: uri */
            website?: string;
            /** Format: email */
            email?: string;
            phone?: string;
        };
        /**
         * @description * `purchase` - Purchase/Restock
         *     * `sale` - Sale
         *     * `transfer_in` - Transfer In
         *     * `transfer_out` - Transfer Out
         *     * `adjustment` - Stock Adjustment
         *     * `damage` - Damage/Loss
         *     * `return` - Customer Return
         *     * `reserve` - Reserve Stock
         *     * `release` - Release Reserved
         * @enum {string}
         */
        MovementTypeEnum: "purchase" | "sale" | "transfer_in" | "transfer_out" | "adjustment" | "damage" | "return" | "reserve" | "release";
        Notification: {
            readonly id: number;
            notification_type: components["schemas"]["NotificationTypeEnum"];
            message?: string | null;
            is_read?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            employee: number;
        };
        NotificationRequest: {
            notification_type: components["schemas"]["NotificationTypeEnum"];
            message?: string | null;
            is_read?: boolean;
            employee: number;
        };
        /**
         * @description * `leave` - Leave Request
         *     * `task` - Task Assignment
         *     * `payroll` - Payroll Update
         * @enum {string}
         */
        NotificationTypeEnum: "leave" | "task" | "payroll";
        /** @enum {unknown} */
        NullEnum: null;
        Opportunity: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title: string;
            stage?: components["schemas"]["StageEnum"];
            /** Format: decimal */
            amount?: string | null;
            customer: number;
        };
        OpportunityRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title: string;
            stage?: components["schemas"]["StageEnum"];
            /** Format: decimal */
            amount?: string | null;
            customer: number;
        };
        Order: {
            readonly id: number;
            items: components["schemas"]["OrderItem"][];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            readonly subtotal: string;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            readonly tax_amount: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            readonly total_amount: string;
            /** Format: decimal */
            paid_amount?: string;
            order_type?: components["schemas"]["OrderTypeEnum"];
            readonly order_number: string;
            status?: components["schemas"]["OrderStatusEnum"];
            payment_status?: components["schemas"]["PaymentStatusEnum"];
            payment_type?: components["schemas"]["PaymentTypeEnum"];
            notes?: string;
            internal_notes?: string;
            /** Format: date-time */
            readonly confirmed_at: string | null;
            /** Format: date-time */
            readonly delivered_at: string | null;
            /** Format: date-time */
            expected_delivery?: string | null;
            branch?: number | null;
            customer: number;
            sales_person?: number | null;
        };
        OrderItem: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity?: number;
            /** Format: decimal */
            unit_price: string;
            /** Format: decimal */
            readonly total_price: string;
            product_variant?: number | null;
            order: number;
            prescription?: number | null;
        };
        OrderItemRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity?: number;
            /** Format: decimal */
            unit_price: string;
            product_variant?: number | null;
            order: number;
            prescription?: number | null;
        };
        OrderRequest: {
            items: components["schemas"]["OrderItemRequest"][];
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            paid_amount?: string;
            order_type?: components["schemas"]["OrderTypeEnum"];
            status?: components["schemas"]["OrderStatusEnum"];
            payment_status?: components["schemas"]["PaymentStatusEnum"];
            payment_type?: components["schemas"]["PaymentTypeEnum"];
            notes?: string;
            internal_notes?: string;
            /** Format: date-time */
            expected_delivery?: string | null;
            branch?: number | null;
            customer: number;
            sales_person?: number | null;
        };
        /**
         * @description * `pending` - pending
         *     * `confirmed` - confirmed
         *     * `ready` - ready
         *     * `delivered` - delivered
         *     * `cancelled` - cancelled
         * @enum {string}
         */
        OrderStatusEnum: "pending" | "confirmed" | "ready" | "delivered" | "cancelled";
        /**
         * @description * `cash` - cash
         *     * `credit` - credit
         *     * `insurance` - insurance
         * @enum {string}
         */
        OrderTypeEnum: "cash" | "credit" | "insurance";
        Page: {
            readonly id: number;
            default_language?: components["schemas"]["DefaultLanguageEnum"];
            is_published?: boolean;
            slug: string;
            /** Deleted */
            is_deleted?: boolean;
            /** Active */
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            translations: components["schemas"]["PageContent"][];
        };
        PageContent: {
            language: components["schemas"]["LanguageEnum"];
            title: string;
            content?: string;
            seo_title?: string;
            meta_description?: string;
            meta_keywords?: string;
        };
        PageContentRequest: {
            language: components["schemas"]["LanguageEnum"];
            title: string;
            content?: string;
            seo_title?: string;
            meta_description?: string;
            meta_keywords?: string;
        };
        PageRequest: {
            default_language?: components["schemas"]["DefaultLanguageEnum"];
            is_published?: boolean;
            slug: string;
            /** Deleted */
            is_deleted?: boolean;
            /** Active */
            is_active?: boolean;
            translations: components["schemas"]["PageContentRequest"][];
        };
        PasswordResetBadRequest: {
            email?: string[];
        };
        PasswordResetSuccessResponse: {
            detail: string;
        };
        PatchedAccountRequest: {
            name?: string;
            currency?: components["schemas"]["AccountCurrencyEnum"];
            user?: number;
        };
        PatchedAttendanceRequest: {
            /** Format: date */
            date?: string;
            /** Format: double */
            hours_worked?: number | null;
            /** Format: time */
            check_in?: string | null;
            /** Format: time */
            check_out?: string | null;
            employee?: number;
        };
        PatchedAttributeValueRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            value?: string;
            attribute?: number;
        };
        PatchedAttributesRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name?: string;
        };
        PatchedBranchRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name?: string;
            branch_type?: components["schemas"]["BranchTypeEnum"];
            country?: string;
            city?: string;
            address?: string;
            phone?: string;
            /** Format: email */
            email?: string;
            is_main_branch?: boolean;
            allows_online_orders?: boolean;
            operating_hours?: unknown;
        };
        PatchedBranchUsersRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            status?: boolean;
            notes?: string | null;
            branch_id?: number;
            employee_id?: number;
        };
        PatchedBrandRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name?: string;
            country?: string;
            /** Format: uri */
            website?: string;
            description?: string;
            /** Format: binary */
            logo?: string | null;
        };
        PatchedCampaignRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name?: string;
            description?: string;
            /** Format: date */
            start_date?: string;
            /** Format: date */
            end_date?: string;
            customers?: number[];
        };
        PatchedCategoryRequest: {
            name?: string;
            category_type?: components["schemas"]["TransactionTypeEnum"];
            description?: string | null;
            parent?: number | null;
        };
        PatchedClientRequest: {
            /** Company Name */
            name?: string;
            max_users?: number;
            max_products?: number;
            max_branches?: number;
            /** Format: date */
            paid_until?: string | null;
            on_trial?: boolean;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
        };
        PatchedComplaintRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            description?: string;
            status?: components["schemas"]["ComplaintStatusEnum"];
            customer?: number;
        };
        PatchedContactRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: email */
            email?: string;
            phone?: string;
            name?: string;
            message?: string;
        };
        PatchedContactUsRequest: {
            /** Format: email */
            email?: string;
            phone?: string;
            name?: string;
            message?: string;
        };
        PatchedCustomerGroupRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name?: string;
            description?: string;
            customers?: number[];
        };
        PatchedCustomerRequest: {
            phone?: string;
            /** @description Enter a valid identification number 10 digits. */
            identification_number?: string;
            first_name?: string;
            last_name?: string;
            /** Format: email */
            email?: string;
            customer_type?: components["schemas"]["CustomerTypeEnum"];
            is_vip?: boolean | null;
            accepts_marketing?: boolean;
            registration_number?: string | null;
            tax_number?: string | null;
            preferred_contact?: components["schemas"]["PreferredContactEnum"];
            /** Format: uri */
            website?: string | null;
            description?: string | null;
            address_line1?: string;
            address_line2?: string;
            city?: string;
            postal_code?: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
        };
        PatchedDepartmentRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name?: string;
            description?: string | null;
            location?: string | null;
        };
        PatchedDocumentRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title?: string;
            /** Format: binary */
            file?: string;
            customer?: number | null;
        };
        PatchedEmployeeRequest: {
            user_id?: number;
            department_id?: number | null;
            position?: components["schemas"]["PositionEnum"];
            /** Format: decimal */
            salary?: string;
            phone?: string;
            /** Format: date */
            hire_date?: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
        };
        PatchedFinancialPeriodRequest: {
            name?: string;
            /** Format: date */
            start_date?: string;
            /** Format: date */
            end_date?: string;
            is_closed?: boolean;
        };
        PatchedFlexiblePriceRequest: {
            variant?: number;
            customer?: number | null;
            customer_group_id?: number | null;
            branch_id?: number | null;
            /** Format: decimal */
            special_price?: string;
            /** Format: date */
            start_date?: string | null;
            /** Format: date */
            end_date?: string | null;
            min_quantity?: number;
            currency?: string;
            priority?: number;
        };
        PatchedInteractionRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            interaction_type?: components["schemas"]["InteractionTypeEnum"];
            notes?: string | null;
            customer?: number;
        };
        PatchedInvoiceRequest: {
            items?: components["schemas"]["InvoiceItemRequest"][];
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            paid_amount?: string;
            invoice_type?: components["schemas"]["InvoiceTypeEnum"];
            /** Format: date */
            due_date?: string | null;
            notes?: string | null;
            branch?: number | null;
            customer?: number;
            order?: number | null;
        };
        PatchedJournalEntryRequest: {
            /** Format: decimal */
            debit?: string;
            /** Format: decimal */
            credit?: string;
            transaction?: number;
            account?: number;
        };
        PatchedLeaveRequest: {
            leave_type?: components["schemas"]["LeaveTypeEnum"];
            /** Format: date */
            end_date?: string | null;
            status?: components["schemas"]["LeaveStatusEnum"];
            employee?: number;
        };
        PatchedLensCoatingRequest: {
            name?: string;
            description?: string;
            /** Active */
            is_active?: boolean;
        };
        PatchedManufacturerRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name?: string;
            country?: string;
            /** Format: uri */
            website?: string;
            /** Format: email */
            email?: string;
            phone?: string;
        };
        PatchedNotificationRequest: {
            notification_type?: components["schemas"]["NotificationTypeEnum"];
            message?: string | null;
            is_read?: boolean;
            employee?: number;
        };
        PatchedOpportunityRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title?: string;
            stage?: components["schemas"]["StageEnum"];
            /** Format: decimal */
            amount?: string | null;
            customer?: number;
        };
        PatchedOrderRequest: {
            items?: components["schemas"]["OrderItemRequest"][];
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            paid_amount?: string;
            order_type?: components["schemas"]["OrderTypeEnum"];
            status?: components["schemas"]["OrderStatusEnum"];
            payment_status?: components["schemas"]["PaymentStatusEnum"];
            payment_type?: components["schemas"]["PaymentTypeEnum"];
            notes?: string;
            internal_notes?: string;
            /** Format: date-time */
            expected_delivery?: string | null;
            branch?: number | null;
            customer?: number;
            sales_person?: number | null;
        };
        PatchedPageRequest: {
            default_language?: components["schemas"]["DefaultLanguageEnum"];
            is_published?: boolean;
            slug?: string;
            /** Deleted */
            is_deleted?: boolean;
            /** Active */
            is_active?: boolean;
            translations?: components["schemas"]["PageContentRequest"][];
        };
        PatchedPaymentRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            amount?: string;
            payment_method?: components["schemas"]["PaymentMethodEnum"];
            invoice?: number;
        };
        PatchedPayrollRequest: {
            month?: string;
            /** Format: decimal */
            basic_salary?: string;
            /** Format: decimal */
            bonuses?: string;
            /** Format: decimal */
            deductions?: string;
            /** Format: decimal */
            net_salary?: string | null;
            employee?: number;
        };
        PatchedPerformanceReviewRequest: {
            rating?: components["schemas"]["RatingEnum"];
            comments?: string | null;
            employee?: number;
        };
        PatchedPermissionRequest: {
            code?: string;
            description?: string;
        };
        PatchedPrescriptionRecordRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            right_sphere?: (components["schemas"]["SphericalEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            right_cylinder?: (components["schemas"]["CylinderEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            right_axis?: number | null;
            left_sphere?: (components["schemas"]["SphericalEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            left_cylinder?: (components["schemas"]["CylinderEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            left_axis?: number | null;
            right_reading_add?: (components["schemas"]["AdditionEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            left_reading_add?: (components["schemas"]["AdditionEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            right_pupillary_distance?: number | null;
            left_pupillary_distance?: number | null;
            sigmant_right?: string;
            sigmant_left?: string;
            a_v_right?: string;
            a_v_left?: string;
            doctor_name?: string;
            /** Format: date */
            prescription_date?: string;
            notes?: string;
            customer?: number;
        };
        PatchedProductImageRequest: {
            variant?: number;
            /** Format: binary */
            image?: string;
            alt_text?: string;
            order?: number;
            is_primary?: boolean;
        };
        PatchedProductRequest: {
            category_id?: number;
            supplier_id?: number;
            manufacturer_id?: number;
            brand_id?: number;
            model?: string;
            type?: components["schemas"]["TypeEnum"];
            name?: string | null;
            description?: string;
            /** Format: binary */
            main_image?: string | null;
            /** Active */
            is_active?: boolean;
        };
        PatchedProductVariantAnswerRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            answer?: string;
            question?: number;
            answered_by?: number;
        };
        PatchedProductVariantMarketingRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title?: string;
            description?: string;
            meta_title?: string;
            meta_description?: string;
            meta_keywords?: string;
            slug?: string;
            /** Format: binary */
            seo_image?: string | null;
            seo_image_alt?: string;
            gender?: components["schemas"]["GenderEnum"];
            age_group?: components["schemas"]["AgeGroupEnum"] | components["schemas"]["BlankEnum"];
            variant?: number;
        };
        PatchedProductVariantOfferRequest: {
            offer?: string;
            /** Format: date */
            start_date?: string;
            /** Format: date */
            end_date?: string;
            ProductVariant?: number;
        };
        PatchedProductVariantQuestionRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            question?: string;
            ProductVariant?: number;
            asked_by?: number;
        };
        PatchedProductVariantRequest: {
            product_id?: number;
            /** @description SKU (Stock Keeping Unit) */
            sku?: string;
            frame_shape_id?: number | null;
            frame_material_id?: number | null;
            frame_color_id?: number | null;
            temple_length?: number | null;
            bridge_width?: number | null;
            lens_diameter?: number | null;
            lens_color?: number | null;
            lens_material?: number | null;
            lens_base_curve?: number | null;
            lens_water_content?: number | null;
            replacement_schedule?: number | null;
            /** Format: date */
            expiration_date?: string | null;
            lens_coating_ids?: number[];
            lens_type_id?: number | null;
            spherical?: (components["schemas"]["SphericalEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            cylinder?: (components["schemas"]["CylinderEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            axis?: number | null;
            addition?: (components["schemas"]["AdditionEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** @description Unit of measurement box piesces */
            unit?: number | null;
            warranty?: number | null;
            weight?: number | null;
            dimensions?: number | null;
            /** Format: decimal */
            last_purchase_price?: string | null;
            /** Format: decimal */
            selling_price?: string;
            /** Format: decimal */
            discount_percentage?: string;
            /** Active */
            is_active?: boolean;
        };
        PatchedProductVariantReviewRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            rating?: number;
            review?: string;
            ProductVariant?: number;
            reviewed_by?: number;
        };
        PatchedRecurringTransactionRequest: {
            /** Format: decimal */
            amount?: string;
            transaction_types?: components["schemas"]["TransactionTypeEnum"];
            interval?: components["schemas"]["IntervalEnum"];
            /** Format: date */
            next_execution?: string;
            account?: number;
        };
        PatchedRolePermissionRequest: {
            role?: number;
            permission?: number;
        };
        PatchedRoleRequest: {
            name?: string;
        };
        PatchedStockMovementsRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            movement_type?: components["schemas"]["MovementTypeEnum"];
            quantity?: number;
            quantity_before?: number;
            quantity_after?: number;
            reference_number?: string;
            notes?: string;
            /** Format: decimal */
            cost_per_unit?: string;
            stocks?: number;
        };
        PatchedStockTransferItemRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity_requested?: number;
            quantity_sent?: number;
            quantity_received?: number;
            /** Format: decimal */
            unit_cost?: string;
            notes?: string;
            transfer?: number;
            variant?: number;
        };
        PatchedStockTransferRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            status?: components["schemas"]["StockTransferStatusEnum"];
            requested_by?: string;
            approved_by?: string;
            /** Format: date-time */
            approved_date?: string | null;
            /** Format: date-time */
            shipped_date?: string | null;
            /** Format: date-time */
            received_date?: string | null;
            notes?: string;
            from_branch?: number;
            to_branch?: number;
        };
        PatchedStocksRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity_in_stock?: number;
            reserved_quantity?: number;
            reorder_level?: number;
            max_stock_level?: number;
            min_stock_level?: number;
            /** Format: decimal */
            average_cost?: string;
            /** Format: date-time */
            last_restocked?: string | null;
            /** Format: date-time */
            last_sale?: string | null;
            allow_backorder?: boolean;
            branch?: number;
            variant?: number;
        };
        PatchedSubscriptionPlanRequest: {
            name?: string;
            duration_months?: number;
            duration_years?: number;
            max_users?: number;
            max_branches?: number;
            max_products?: number;
            /**
             * Month
             * Format: decimal
             */
            month_price?: string;
            /**
             * Year
             * Format: decimal
             */
            year_price?: string;
            currency?: components["schemas"]["SubscriptionPlanCurrencyEnum"];
            /** Format: decimal */
            discount?: string;
        };
        PatchedSubscriptionRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            subscription_type?: components["schemas"]["SubscriptionTypeEnum"];
            /** Format: date-time */
            end_date?: string;
            customer?: number;
        };
        PatchedSupplierRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name?: string;
            contact_person?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            address?: string;
            country?: string;
            /** Format: uri */
            website?: string;
            payment_terms?: string;
        };
        PatchedTaskRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title?: string;
            description?: string | null;
            priority?: components["schemas"]["PriorityEnum"];
            /** Format: date-time */
            due_date?: string | null;
            completed?: boolean;
            customer?: number | null;
            opportunity?: number | null;
        };
        PatchedTaxRequest: {
            name?: string;
            /** Format: decimal */
            rate?: string;
            /** Format: date */
            effective_date?: string;
            is_active?: boolean;
            description?: string | null;
        };
        PatchedTenantSettingsRequest: {
            /** Format: binary */
            logo?: string | null;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            business_name?: string;
            description?: string;
            /** Format: uri */
            facebook?: string;
            /** Format: uri */
            instagram?: string;
            whatsapp?: string;
            /** Format: uri */
            twitter?: string;
            /** Format: uri */
            tiktok?: string;
            /** Format: uri */
            linkedin?: string;
            phone?: string;
            /** Format: email */
            email?: string;
            /** Format: uri */
            website?: string;
            seo_title?: string;
            seo_description?: string;
            seo_keywords?: string;
            address?: string;
            city?: string;
            state?: string;
            postal_code?: string;
            country?: string;
            bank_name?: string;
            account_number?: string;
            iban?: string;
            swift_code?: string;
        };
        PatchedTransactionRequest: {
            /** Format: date */
            date?: string;
            /** Format: decimal */
            amount?: string;
            transaction_type?: components["schemas"]["TransactionTypeEnum"];
            description?: string | null;
            account?: number;
            period?: number;
            category?: number | null;
            tax_rate?: number | null;
        };
        PatchedUserRequest: {
            username?: string;
            /** Format: email */
            email?: string;
            first_name?: string;
            last_name?: string;
            role_id?: number;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /**
             * Staff status
             * @description Designates whether the user can log into this admin site.
             */
            is_staff?: boolean;
            password?: string;
            is_deleted?: boolean;
            phone?: string;
        };
        Payment: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            amount: string;
            payment_method: components["schemas"]["PaymentMethodEnum"];
            invoice: number;
        };
        /**
         * @description * `cash` - Cash
         *     * `card` - Card
         * @enum {string}
         */
        PaymentMethodEnum: "cash" | "card";
        PaymentRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            amount: string;
            payment_method: components["schemas"]["PaymentMethodEnum"];
            invoice: number;
        };
        /**
         * @description * `pending` - Pending
         *     * `partial` - Partial
         *     * `paid` - Paid
         *     * `refunded` - Refunded
         *     * `disputed` - Disputed
         * @enum {string}
         */
        PaymentStatusEnum: "pending" | "partial" | "paid" | "refunded" | "disputed";
        /**
         * @description * `cash` - cash
         *     * `credit` - credit
         *     * `insurance` - insurance
         * @enum {string}
         */
        PaymentTypeEnum: "cash" | "credit" | "insurance";
        Payroll: {
            readonly id: number;
            month: string;
            /** Format: decimal */
            basic_salary: string;
            /** Format: decimal */
            bonuses?: string;
            /** Format: decimal */
            deductions?: string;
            /** Format: decimal */
            net_salary?: string | null;
            employee: number;
        };
        PayrollRequest: {
            month: string;
            /** Format: decimal */
            basic_salary: string;
            /** Format: decimal */
            bonuses?: string;
            /** Format: decimal */
            deductions?: string;
            /** Format: decimal */
            net_salary?: string | null;
            employee: number;
        };
        PerformanceReview: {
            readonly id: number;
            /** Format: date */
            readonly review_date: string;
            rating: components["schemas"]["RatingEnum"];
            comments?: string | null;
            employee: number;
        };
        PerformanceReviewRequest: {
            rating: components["schemas"]["RatingEnum"];
            comments?: string | null;
            employee: number;
        };
        Permission: {
            readonly id: number;
            code: string;
            description?: string;
        };
        PermissionRequest: {
            code: string;
            description?: string;
        };
        /**
         * @description * `manager` - Manager
         *     * `employee` - Employee
         *     * `hr` - HR
         *     * `admin` - Admin
         *     * `accountant` - Accountant
         *     * `marketing` - Marketing
         *     * `sales` - Sales
         *     * `delivery` - Delivery
         *     * `customer_service` - Customer Service
         * @enum {string}
         */
        PositionEnum: "manager" | "employee" | "hr" | "admin" | "accountant" | "marketing" | "sales" | "delivery" | "customer_service";
        /**
         * @description * `email` - Email
         *     * `phone` - Phone
         *     * `sms` - SMS
         * @enum {string}
         */
        PreferredContactEnum: "email" | "phone" | "sms";
        PrescriptionRecord: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            right_sphere?: (components["schemas"]["SphericalEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            right_cylinder?: (components["schemas"]["CylinderEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            right_axis?: number | null;
            left_sphere?: (components["schemas"]["SphericalEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            left_cylinder?: (components["schemas"]["CylinderEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            left_axis?: number | null;
            right_reading_add?: (components["schemas"]["AdditionEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            left_reading_add?: (components["schemas"]["AdditionEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            right_pupillary_distance?: number | null;
            left_pupillary_distance?: number | null;
            sigmant_right?: string;
            sigmant_left?: string;
            a_v_right?: string;
            a_v_left?: string;
            doctor_name?: string;
            /** Format: date */
            prescription_date: string;
            notes?: string;
            customer: number;
        };
        PrescriptionRecordRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            right_sphere?: (components["schemas"]["SphericalEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            right_cylinder?: (components["schemas"]["CylinderEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            right_axis?: number | null;
            left_sphere?: (components["schemas"]["SphericalEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            left_cylinder?: (components["schemas"]["CylinderEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            left_axis?: number | null;
            right_reading_add?: (components["schemas"]["AdditionEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            left_reading_add?: (components["schemas"]["AdditionEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            right_pupillary_distance?: number | null;
            left_pupillary_distance?: number | null;
            sigmant_right?: string;
            sigmant_left?: string;
            a_v_right?: string;
            a_v_left?: string;
            doctor_name?: string;
            /** Format: date */
            prescription_date: string;
            notes?: string;
            customer: number;
        };
        /**
         * @description * `low` - Low
         *     * `medium` - Medium
         *     * `high` - High
         * @enum {string}
         */
        PriorityEnum: "low" | "medium" | "high";
        Product: {
            readonly id: number;
            readonly category: components["schemas"]["Category"];
            readonly supplier: components["schemas"]["Supplier"];
            readonly manufacturer: components["schemas"]["Manufacturer"];
            readonly brand: components["schemas"]["Brand"];
            model: string;
            type: components["schemas"]["TypeEnum"];
            name?: string | null;
            description?: string;
            /** Format: uri */
            main_image?: string | null;
            readonly variants: components["schemas"]["ProductVariantList"][];
            /** Active */
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        ProductImage: {
            readonly id: number;
            variant: number;
            /** Format: uri */
            image: string;
            alt_text?: string;
            order?: number;
            is_primary?: boolean;
        };
        ProductImageRequest: {
            variant: number;
            /** Format: binary */
            image: string;
            alt_text?: string;
            order?: number;
            is_primary?: boolean;
        };
        ProductRequest: {
            category_id: number;
            supplier_id: number;
            manufacturer_id: number;
            brand_id: number;
            model: string;
            type: components["schemas"]["TypeEnum"];
            name?: string | null;
            description?: string;
            /** Format: binary */
            main_image?: string | null;
            /** Active */
            is_active?: boolean;
        };
        ProductVariant: {
            readonly id: number;
            readonly product: components["schemas"]["Product"];
            /** @description SKU (Stock Keeping Unit) */
            sku: string;
            /** @description Unique USKU */
            readonly usku: string;
            readonly frame_shape: components["schemas"]["AttributeValue"];
            readonly frame_material: components["schemas"]["AttributeValue"];
            readonly frame_color: components["schemas"]["AttributeValue"];
            temple_length?: number | null;
            readonly temple_length_id: number | null;
            bridge_width?: number | null;
            readonly bridge_width_id: number | null;
            lens_diameter?: number | null;
            readonly lens_diameter_id: number | null;
            lens_color?: number | null;
            readonly lens_color_id: number | null;
            lens_material?: number | null;
            readonly lens_material_id: number | null;
            lens_base_curve?: number | null;
            readonly lens_base_curve_id: number | null;
            lens_water_content?: number | null;
            readonly lens_water_content_id: number | null;
            replacement_schedule?: number | null;
            readonly replacement_schedule_id: number | null;
            /** Format: date */
            expiration_date?: string | null;
            readonly lens_coatings: components["schemas"]["LensCoating"][];
            readonly lens_type: components["schemas"]["AttributeValue"];
            spherical?: (components["schemas"]["SphericalEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            cylinder?: (components["schemas"]["CylinderEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            axis?: number | null;
            addition?: (components["schemas"]["AdditionEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** @description Unit of measurement box piesces */
            unit?: number | null;
            /** @description Unit of measurement box piesces */
            readonly unit_id: number | null;
            warranty?: number | null;
            readonly warranty_id: number | null;
            weight?: number | null;
            readonly weight_id: number | null;
            dimensions?: number | null;
            readonly dimensions_id: number | null;
            /** Format: decimal */
            last_purchase_price?: string | null;
            /** Format: decimal */
            selling_price: string;
            /** Format: decimal */
            discount_percentage?: string;
            readonly discount_price: string;
            readonly images: components["schemas"]["ProductImage"][];
            /** Active */
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        ProductVariantAnswer: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            answer: string;
            question: number;
            answered_by: number;
        };
        ProductVariantAnswerRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            answer: string;
            question: number;
            answered_by: number;
        };
        ProductVariantList: {
            readonly id: number;
            /** @description SKU (Stock Keeping Unit) */
            sku: string;
            /** @description Unique USKU */
            readonly usku: string;
            readonly frame_color: components["schemas"]["AttributeValue"];
            readonly lens_color: components["schemas"]["AttributeValue"];
            /** Format: decimal */
            selling_price: string;
            /** Format: decimal */
            discount_percentage?: string;
            /**
             * Format: double
             * @description Calculate the discount price for the product variant.
             *
             *     Args:
             *         obj: ProductVariant instance
             *
             *     Returns:
             *         float: Discounted price or None if no discount
             */
            readonly discount_price: number;
            /** Active */
            is_active?: boolean;
        };
        ProductVariantListRequest: {
            /** @description SKU (Stock Keeping Unit) */
            sku: string;
            /** Format: decimal */
            selling_price: string;
            /** Format: decimal */
            discount_percentage?: string;
            /** Active */
            is_active?: boolean;
        };
        ProductVariantMarketing: {
            readonly id: number;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title: string;
            description: string;
            meta_title?: string;
            meta_description?: string;
            meta_keywords?: string;
            slug: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Format: uri */
            seo_image?: string | null;
            seo_image_alt?: string;
            gender?: components["schemas"]["GenderEnum"];
            age_group?: components["schemas"]["AgeGroupEnum"] | components["schemas"]["BlankEnum"];
            variant: number;
        };
        ProductVariantMarketingRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title: string;
            description: string;
            meta_title?: string;
            meta_description?: string;
            meta_keywords?: string;
            slug: string;
            /** Format: binary */
            seo_image?: string | null;
            seo_image_alt?: string;
            gender?: components["schemas"]["GenderEnum"];
            age_group?: components["schemas"]["AgeGroupEnum"] | components["schemas"]["BlankEnum"];
            variant: number;
        };
        ProductVariantOffer: {
            readonly id: number;
            offer: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            ProductVariant: number;
        };
        ProductVariantOfferRequest: {
            offer: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            ProductVariant: number;
        };
        ProductVariantQuestion: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            question: string;
            ProductVariant: number;
            asked_by: number;
        };
        ProductVariantQuestionRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            question: string;
            ProductVariant: number;
            asked_by: number;
        };
        ProductVariantRequest: {
            product_id: number;
            /** @description SKU (Stock Keeping Unit) */
            sku: string;
            frame_shape_id: number | null;
            frame_material_id: number | null;
            frame_color_id: number | null;
            temple_length?: number | null;
            bridge_width?: number | null;
            lens_diameter?: number | null;
            lens_color?: number | null;
            lens_material?: number | null;
            lens_base_curve?: number | null;
            lens_water_content?: number | null;
            replacement_schedule?: number | null;
            /** Format: date */
            expiration_date?: string | null;
            lens_coating_ids?: number[];
            lens_type_id: number | null;
            spherical?: (components["schemas"]["SphericalEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            cylinder?: (components["schemas"]["CylinderEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            axis?: number | null;
            addition?: (components["schemas"]["AdditionEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** @description Unit of measurement box piesces */
            unit?: number | null;
            warranty?: number | null;
            weight?: number | null;
            dimensions?: number | null;
            /** Format: decimal */
            last_purchase_price?: string | null;
            /** Format: decimal */
            selling_price: string;
            /** Format: decimal */
            discount_percentage?: string;
            /** Active */
            is_active?: boolean;
        };
        ProductVariantReview: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            rating: number;
            review: string;
            ProductVariant: number;
            reviewed_by: number;
        };
        ProductVariantReviewRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            rating: number;
            review: string;
            ProductVariant: number;
            reviewed_by: number;
        };
        /**
         * @description * `1` - 1
         *     * `2` - 2
         *     * `3` - 3
         *     * `4` - 4
         *     * `5` - 5
         * @enum {integer}
         */
        RatingEnum: 1 | 2 | 3 | 4 | 5;
        RecurringTransaction: {
            readonly id: number;
            readonly amount_currency: string;
            /** Format: decimal */
            amount: string;
            transaction_types: components["schemas"]["TransactionTypeEnum"];
            interval: components["schemas"]["IntervalEnum"];
            /** Format: date */
            next_execution: string;
            account: number;
        };
        RecurringTransactionRequest: {
            /** Format: decimal */
            amount: string;
            transaction_types: components["schemas"]["TransactionTypeEnum"];
            interval: components["schemas"]["IntervalEnum"];
            /** Format: date */
            next_execution: string;
            account: number;
        };
        RefreshTokenResponse: {
            msg: string;
            access: string;
        };
        RegisterRequest: {
            username: string;
            password: string;
            /** Format: email */
            email: string;
        };
        RegisterSuccessResponse: {
            msg: string;
            user: components["schemas"]["User"];
        };
        Role: {
            readonly id: number;
            name: string;
            readonly permissions: components["schemas"]["Permission"][];
        };
        RolePermission: {
            readonly id: number;
            role: number;
            permission: number;
        };
        RolePermissionRequest: {
            role: number;
            permission: number;
        };
        RoleRequest: {
            name: string;
        };
        /**
         * @description * `-30.00` - -30.00
         *     * `-29.75` - -29.75
         *     * `-29.50` - -29.50
         *     * `-29.25` - -29.25
         *     * `-29.00` - -29.00
         *     * `-28.75` - -28.75
         *     * `-28.50` - -28.50
         *     * `-28.25` - -28.25
         *     * `-28.00` - -28.00
         *     * `-27.75` - -27.75
         *     * `-27.50` - -27.50
         *     * `-27.25` - -27.25
         *     * `-27.00` - -27.00
         *     * `-26.75` - -26.75
         *     * `-26.50` - -26.50
         *     * `-26.25` - -26.25
         *     * `-26.00` - -26.00
         *     * `-25.75` - -25.75
         *     * `-25.50` - -25.50
         *     * `-25.25` - -25.25
         *     * `-25.00` - -25.00
         *     * `-24.75` - -24.75
         *     * `-24.50` - -24.50
         *     * `-24.25` - -24.25
         *     * `-24.00` - -24.00
         *     * `-23.75` - -23.75
         *     * `-23.50` - -23.50
         *     * `-23.25` - -23.25
         *     * `-23.00` - -23.00
         *     * `-22.75` - -22.75
         *     * `-22.50` - -22.50
         *     * `-22.25` - -22.25
         *     * `-22.00` - -22.00
         *     * `-21.75` - -21.75
         *     * `-21.50` - -21.50
         *     * `-21.25` - -21.25
         *     * `-21.00` - -21.00
         *     * `-20.75` - -20.75
         *     * `-20.50` - -20.50
         *     * `-20.25` - -20.25
         *     * `-20.00` - -20.00
         *     * `-19.75` - -19.75
         *     * `-19.50` - -19.50
         *     * `-19.25` - -19.25
         *     * `-19.00` - -19.00
         *     * `-18.75` - -18.75
         *     * `-18.50` - -18.50
         *     * `-18.25` - -18.25
         *     * `-18.00` - -18.00
         *     * `-17.75` - -17.75
         *     * `-17.50` - -17.50
         *     * `-17.25` - -17.25
         *     * `-17.00` - -17.00
         *     * `-16.75` - -16.75
         *     * `-16.50` - -16.50
         *     * `-16.25` - -16.25
         *     * `-16.00` - -16.00
         *     * `-15.75` - -15.75
         *     * `-15.50` - -15.50
         *     * `-15.25` - -15.25
         *     * `-15.00` - -15.00
         *     * `-14.75` - -14.75
         *     * `-14.50` - -14.50
         *     * `-14.25` - -14.25
         *     * `-14.00` - -14.00
         *     * `-13.75` - -13.75
         *     * `-13.50` - -13.50
         *     * `-13.25` - -13.25
         *     * `-13.00` - -13.00
         *     * `-12.75` - -12.75
         *     * `-12.50` - -12.50
         *     * `-12.25` - -12.25
         *     * `-12.00` - -12.00
         *     * `-11.75` - -11.75
         *     * `-11.50` - -11.50
         *     * `-11.25` - -11.25
         *     * `-11.00` - -11.00
         *     * `-10.75` - -10.75
         *     * `-10.50` - -10.50
         *     * `-10.25` - -10.25
         *     * `-10.00` - -10.00
         *     * `-09.75` - -09.75
         *     * `-09.50` - -09.50
         *     * `-09.25` - -09.25
         *     * `-09.00` - -09.00
         *     * `-08.75` - -08.75
         *     * `-08.50` - -08.50
         *     * `-08.25` - -08.25
         *     * `-08.00` - -08.00
         *     * `-07.75` - -07.75
         *     * `-07.50` - -07.50
         *     * `-07.25` - -07.25
         *     * `-07.00` - -07.00
         *     * `-06.75` - -06.75
         *     * `-06.50` - -06.50
         *     * `-06.25` - -06.25
         *     * `-06.00` - -06.00
         *     * `-05.75` - -05.75
         *     * `-05.50` - -05.50
         *     * `-05.25` - -05.25
         *     * `-05.00` - -05.00
         *     * `-04.75` - -04.75
         *     * `-04.50` - -04.50
         *     * `-04.25` - -04.25
         *     * `-04.00` - -04.00
         *     * `-03.75` - -03.75
         *     * `-03.50` - -03.50
         *     * `-03.25` - -03.25
         *     * `-03.00` - -03.00
         *     * `-02.75` - -02.75
         *     * `-02.50` - -02.50
         *     * `-02.25` - -02.25
         *     * `-02.00` - -02.00
         *     * `-01.75` - -01.75
         *     * `-01.50` - -01.50
         *     * `-01.25` - -01.25
         *     * `-01.00` - -01.00
         *     * `-00.75` - -00.75
         *     * `-00.50` - -00.50
         *     * `-00.25` - -00.25
         *     * `-00.00` - -00.00
         *     * `+00.25` - +00.25
         *     * `+00.50` - +00.50
         *     * `+00.75` - +00.75
         *     * `+01.00` - +01.00
         *     * `+01.25` - +01.25
         *     * `+01.50` - +01.50
         *     * `+01.75` - +01.75
         *     * `+02.00` - +02.00
         *     * `+02.25` - +02.25
         *     * `+02.50` - +02.50
         *     * `+02.75` - +02.75
         *     * `+03.00` - +03.00
         *     * `+03.25` - +03.25
         *     * `+03.50` - +03.50
         *     * `+03.75` - +03.75
         *     * `+04.00` - +04.00
         *     * `+04.25` - +04.25
         *     * `+04.50` - +04.50
         *     * `+04.75` - +04.75
         *     * `+05.00` - +05.00
         *     * `+05.25` - +05.25
         *     * `+05.50` - +05.50
         *     * `+05.75` - +05.75
         *     * `+06.00` - +06.00
         *     * `+06.25` - +06.25
         *     * `+06.50` - +06.50
         *     * `+06.75` - +06.75
         *     * `+07.00` - +07.00
         *     * `+07.25` - +07.25
         *     * `+07.50` - +07.50
         *     * `+07.75` - +07.75
         *     * `+08.00` - +08.00
         *     * `+08.25` - +08.25
         *     * `+08.50` - +08.50
         *     * `+08.75` - +08.75
         *     * `+09.00` - +09.00
         *     * `+09.25` - +09.25
         *     * `+09.50` - +09.50
         *     * `+09.75` - +09.75
         *     * `+10.00` - +10.00
         *     * `+10.25` - +10.25
         *     * `+10.50` - +10.50
         *     * `+10.75` - +10.75
         *     * `+11.00` - +11.00
         *     * `+11.25` - +11.25
         *     * `+11.50` - +11.50
         *     * `+11.75` - +11.75
         *     * `+12.00` - +12.00
         *     * `+12.25` - +12.25
         *     * `+12.50` - +12.50
         *     * `+12.75` - +12.75
         *     * `+13.00` - +13.00
         *     * `+13.25` - +13.25
         *     * `+13.50` - +13.50
         *     * `+13.75` - +13.75
         *     * `+14.00` - +14.00
         *     * `+14.25` - +14.25
         *     * `+14.50` - +14.50
         *     * `+14.75` - +14.75
         *     * `+15.00` - +15.00
         *     * `+15.25` - +15.25
         *     * `+15.50` - +15.50
         *     * `+15.75` - +15.75
         *     * `+16.00` - +16.00
         *     * `+16.25` - +16.25
         *     * `+16.50` - +16.50
         *     * `+16.75` - +16.75
         *     * `+17.00` - +17.00
         *     * `+17.25` - +17.25
         *     * `+17.50` - +17.50
         *     * `+17.75` - +17.75
         *     * `+18.00` - +18.00
         *     * `+18.25` - +18.25
         *     * `+18.50` - +18.50
         *     * `+18.75` - +18.75
         *     * `+19.00` - +19.00
         *     * `+19.25` - +19.25
         *     * `+19.50` - +19.50
         *     * `+19.75` - +19.75
         *     * `+20.00` - +20.00
         *     * `+20.25` - +20.25
         *     * `+20.50` - +20.50
         *     * `+20.75` - +20.75
         *     * `+21.00` - +21.00
         *     * `+21.25` - +21.25
         *     * `+21.50` - +21.50
         *     * `+21.75` - +21.75
         *     * `+22.00` - +22.00
         *     * `+22.25` - +22.25
         *     * `+22.50` - +22.50
         *     * `+22.75` - +22.75
         *     * `+23.00` - +23.00
         *     * `+23.25` - +23.25
         *     * `+23.50` - +23.50
         *     * `+23.75` - +23.75
         *     * `+24.00` - +24.00
         *     * `+24.25` - +24.25
         *     * `+24.50` - +24.50
         *     * `+24.75` - +24.75
         *     * `+25.00` - +25.00
         *     * `+25.25` - +25.25
         *     * `+25.50` - +25.50
         *     * `+25.75` - +25.75
         *     * `+26.00` - +26.00
         *     * `+26.25` - +26.25
         *     * `+26.50` - +26.50
         *     * `+26.75` - +26.75
         *     * `+27.00` - +27.00
         *     * `+27.25` - +27.25
         *     * `+27.50` - +27.50
         *     * `+27.75` - +27.75
         *     * `+28.00` - +28.00
         *     * `+28.25` - +28.25
         *     * `+28.50` - +28.50
         *     * `+28.75` - +28.75
         *     * `+29.00` - +29.00
         *     * `+29.25` - +29.25
         *     * `+29.50` - +29.50
         *     * `+29.75` - +29.75
         *     * `+30.00` - +30.00
         * @enum {string}
         */
        SphericalEnum: "-30.00" | "-29.75" | "-29.50" | "-29.25" | "-29.00" | "-28.75" | "-28.50" | "-28.25" | "-28.00" | "-27.75" | "-27.50" | "-27.25" | "-27.00" | "-26.75" | "-26.50" | "-26.25" | "-26.00" | "-25.75" | "-25.50" | "-25.25" | "-25.00" | "-24.75" | "-24.50" | "-24.25" | "-24.00" | "-23.75" | "-23.50" | "-23.25" | "-23.00" | "-22.75" | "-22.50" | "-22.25" | "-22.00" | "-21.75" | "-21.50" | "-21.25" | "-21.00" | "-20.75" | "-20.50" | "-20.25" | "-20.00" | "-19.75" | "-19.50" | "-19.25" | "-19.00" | "-18.75" | "-18.50" | "-18.25" | "-18.00" | "-17.75" | "-17.50" | "-17.25" | "-17.00" | "-16.75" | "-16.50" | "-16.25" | "-16.00" | "-15.75" | "-15.50" | "-15.25" | "-15.00" | "-14.75" | "-14.50" | "-14.25" | "-14.00" | "-13.75" | "-13.50" | "-13.25" | "-13.00" | "-12.75" | "-12.50" | "-12.25" | "-12.00" | "-11.75" | "-11.50" | "-11.25" | "-11.00" | "-10.75" | "-10.50" | "-10.25" | "-10.00" | "-09.75" | "-09.50" | "-09.25" | "-09.00" | "-08.75" | "-08.50" | "-08.25" | "-08.00" | "-07.75" | "-07.50" | "-07.25" | "-07.00" | "-06.75" | "-06.50" | "-06.25" | "-06.00" | "-05.75" | "-05.50" | "-05.25" | "-05.00" | "-04.75" | "-04.50" | "-04.25" | "-04.00" | "-03.75" | "-03.50" | "-03.25" | "-03.00" | "-02.75" | "-02.50" | "-02.25" | "-02.00" | "-01.75" | "-01.50" | "-01.25" | "-01.00" | "-00.75" | "-00.50" | "-00.25" | "-00.00" | "+00.25" | "+00.50" | "+00.75" | "+01.00" | "+01.25" | "+01.50" | "+01.75" | "+02.00" | "+02.25" | "+02.50" | "+02.75" | "+03.00" | "+03.25" | "+03.50" | "+03.75" | "+04.00" | "+04.25" | "+04.50" | "+04.75" | "+05.00" | "+05.25" | "+05.50" | "+05.75" | "+06.00" | "+06.25" | "+06.50" | "+06.75" | "+07.00" | "+07.25" | "+07.50" | "+07.75" | "+08.00" | "+08.25" | "+08.50" | "+08.75" | "+09.00" | "+09.25" | "+09.50" | "+09.75" | "+10.00" | "+10.25" | "+10.50" | "+10.75" | "+11.00" | "+11.25" | "+11.50" | "+11.75" | "+12.00" | "+12.25" | "+12.50" | "+12.75" | "+13.00" | "+13.25" | "+13.50" | "+13.75" | "+14.00" | "+14.25" | "+14.50" | "+14.75" | "+15.00" | "+15.25" | "+15.50" | "+15.75" | "+16.00" | "+16.25" | "+16.50" | "+16.75" | "+17.00" | "+17.25" | "+17.50" | "+17.75" | "+18.00" | "+18.25" | "+18.50" | "+18.75" | "+19.00" | "+19.25" | "+19.50" | "+19.75" | "+20.00" | "+20.25" | "+20.50" | "+20.75" | "+21.00" | "+21.25" | "+21.50" | "+21.75" | "+22.00" | "+22.25" | "+22.50" | "+22.75" | "+23.00" | "+23.25" | "+23.50" | "+23.75" | "+24.00" | "+24.25" | "+24.50" | "+24.75" | "+25.00" | "+25.25" | "+25.50" | "+25.75" | "+26.00" | "+26.25" | "+26.50" | "+26.75" | "+27.00" | "+27.25" | "+27.50" | "+27.75" | "+28.00" | "+28.25" | "+28.50" | "+28.75" | "+29.00" | "+29.25" | "+29.50" | "+29.75" | "+30.00";
        /**
         * @description * `lead` - Lead
         *     * `qualified` - Qualified
         *     * `proposal` - Proposal
         *     * `negotiation` - Negotiation
         *     * `won` - Won
         *     * `lost` - Lost
         * @enum {string}
         */
        StageEnum: "lead" | "qualified" | "proposal" | "negotiation" | "won" | "lost";
        StockMovements: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            movement_type: components["schemas"]["MovementTypeEnum"];
            quantity: number;
            quantity_before: number;
            quantity_after: number;
            reference_number?: string;
            notes?: string;
            /** Format: date-time */
            readonly movement_date: string;
            /** Format: decimal */
            cost_per_unit?: string;
            stocks: number;
        };
        StockMovementsRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            movement_type: components["schemas"]["MovementTypeEnum"];
            quantity: number;
            quantity_before: number;
            quantity_after: number;
            reference_number?: string;
            notes?: string;
            /** Format: decimal */
            cost_per_unit?: string;
            stocks: number;
        };
        StockTransfer: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            readonly transfer_number: string;
            status?: components["schemas"]["StockTransferStatusEnum"];
            requested_by?: string;
            approved_by?: string;
            /** Format: date-time */
            readonly requested_date: string;
            /** Format: date-time */
            approved_date?: string | null;
            /** Format: date-time */
            shipped_date?: string | null;
            /** Format: date-time */
            received_date?: string | null;
            notes?: string;
            from_branch: number;
            to_branch: number;
        };
        StockTransferItem: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity_requested: number;
            quantity_sent?: number;
            quantity_received?: number;
            /** Format: decimal */
            unit_cost?: string;
            notes?: string;
            transfer: number;
            variant: number;
        };
        StockTransferItemRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity_requested: number;
            quantity_sent?: number;
            quantity_received?: number;
            /** Format: decimal */
            unit_cost?: string;
            notes?: string;
            transfer: number;
            variant: number;
        };
        StockTransferRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            status?: components["schemas"]["StockTransferStatusEnum"];
            requested_by?: string;
            approved_by?: string;
            /** Format: date-time */
            approved_date?: string | null;
            /** Format: date-time */
            shipped_date?: string | null;
            /** Format: date-time */
            received_date?: string | null;
            notes?: string;
            from_branch: number;
            to_branch: number;
        };
        /**
         * @description * `pending` - Pending
         *     * `in_transit` - In Transit
         *     * `completed` - Completed
         *     * `cancelled` - Cancelled
         * @enum {string}
         */
        StockTransferStatusEnum: "pending" | "in_transit" | "completed" | "cancelled";
        Stocks: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity_in_stock?: number;
            reserved_quantity?: number;
            reorder_level?: number;
            max_stock_level?: number;
            min_stock_level?: number;
            /** Format: decimal */
            average_cost?: string;
            /** Format: date-time */
            last_restocked?: string | null;
            /** Format: date-time */
            last_sale?: string | null;
            allow_backorder?: boolean;
            branch: number;
            variant: number;
        };
        StocksRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity_in_stock?: number;
            reserved_quantity?: number;
            reorder_level?: number;
            max_stock_level?: number;
            min_stock_level?: number;
            /** Format: decimal */
            average_cost?: string;
            /** Format: date-time */
            last_restocked?: string | null;
            /** Format: date-time */
            last_sale?: string | null;
            allow_backorder?: boolean;
            branch: number;
            variant: number;
        };
        Subscription: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            subscription_type: components["schemas"]["SubscriptionTypeEnum"];
            /** Format: date-time */
            readonly start_date: string;
            /** Format: date-time */
            end_date: string;
            customer: number;
        };
        SubscriptionPlan: {
            readonly id: number;
            name: string;
            duration_months?: number;
            duration_years?: number;
            max_users?: number;
            max_branches?: number;
            max_products?: number;
            /**
             * Month
             * Format: decimal
             */
            month_price?: string;
            /**
             * Year
             * Format: decimal
             */
            year_price?: string;
            currency?: components["schemas"]["SubscriptionPlanCurrencyEnum"];
            /** Format: decimal */
            discount?: string;
            readonly field_labels: string;
        };
        /**
         * @description * `usd` - USD
         *     * `egp` - EGP
         *     * `sar` - SAR
         *     * `aud` - AUD
         *     * `eur` - EUR
         * @enum {string}
         */
        SubscriptionPlanCurrencyEnum: "usd" | "egp" | "sar" | "aud" | "eur";
        SubscriptionPlanRequest: {
            name: string;
            duration_months?: number;
            duration_years?: number;
            max_users?: number;
            max_branches?: number;
            max_products?: number;
            /**
             * Month
             * Format: decimal
             */
            month_price?: string;
            /**
             * Year
             * Format: decimal
             */
            year_price?: string;
            currency?: components["schemas"]["SubscriptionPlanCurrencyEnum"];
            /** Format: decimal */
            discount?: string;
        };
        SubscriptionRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            subscription_type: components["schemas"]["SubscriptionTypeEnum"];
            /** Format: date-time */
            end_date: string;
            customer: number;
        };
        /**
         * @description * `monthly` - Monthly
         *     * `yearly` - Yearly
         *     * `lifetime` - Lifetime
         * @enum {string}
         */
        SubscriptionTypeEnum: "monthly" | "yearly" | "lifetime";
        Supplier: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            contact_person?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            address?: string;
            country?: string;
            /** Format: uri */
            website?: string;
            payment_terms?: string;
        };
        SupplierRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            name: string;
            contact_person?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            address?: string;
            country?: string;
            /** Format: uri */
            website?: string;
            payment_terms?: string;
        };
        Task: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title: string;
            description?: string | null;
            priority?: components["schemas"]["PriorityEnum"];
            /** Format: date-time */
            due_date?: string | null;
            completed?: boolean;
            customer?: number | null;
            opportunity?: number | null;
        };
        TaskRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            title: string;
            description?: string | null;
            priority?: components["schemas"]["PriorityEnum"];
            /** Format: date-time */
            due_date?: string | null;
            completed?: boolean;
            customer?: number | null;
            opportunity?: number | null;
        };
        Tax: {
            readonly id: number;
            name: string;
            /** Format: decimal */
            rate: string;
            /** Format: date */
            effective_date: string;
            is_active?: boolean;
            description?: string | null;
        };
        TaxRequest: {
            name: string;
            /** Format: decimal */
            rate: string;
            /** Format: date */
            effective_date: string;
            is_active?: boolean;
            description?: string | null;
        };
        TenantSettings: {
            readonly id: number;
            /** Format: uri */
            logo?: string | null;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            business_name?: string;
            description?: string;
            /** Format: uri */
            facebook?: string;
            /** Format: uri */
            instagram?: string;
            whatsapp?: string;
            /** Format: uri */
            twitter?: string;
            /** Format: uri */
            tiktok?: string;
            /** Format: uri */
            linkedin?: string;
            phone?: string;
            /** Format: email */
            email?: string;
            /** Format: uri */
            website?: string;
            seo_title?: string;
            seo_description?: string;
            seo_keywords?: string;
            address?: string;
            city?: string;
            state?: string;
            postal_code?: string;
            country?: string;
            bank_name?: string;
            account_number?: string;
            iban?: string;
            swift_code?: string;
        };
        TenantSettingsRequest: {
            /** Format: binary */
            logo?: string | null;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            business_name?: string;
            description?: string;
            /** Format: uri */
            facebook?: string;
            /** Format: uri */
            instagram?: string;
            whatsapp?: string;
            /** Format: uri */
            twitter?: string;
            /** Format: uri */
            tiktok?: string;
            /** Format: uri */
            linkedin?: string;
            phone?: string;
            /** Format: email */
            email?: string;
            /** Format: uri */
            website?: string;
            seo_title?: string;
            seo_description?: string;
            seo_keywords?: string;
            address?: string;
            city?: string;
            state?: string;
            postal_code?: string;
            country?: string;
            bank_name?: string;
            account_number?: string;
            iban?: string;
            swift_code?: string;
        };
        TokenRefreshError: {
            error: string;
        };
        Transaction: {
            readonly id: number;
            /** Format: date */
            date: string;
            readonly amount_currency: string;
            /** Format: decimal */
            amount: string;
            transaction_type: components["schemas"]["TransactionTypeEnum"];
            description?: string | null;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            account: number;
            period: number;
            category?: number | null;
            tax_rate?: number | null;
        };
        TransactionRequest: {
            /** Format: date */
            date: string;
            /** Format: decimal */
            amount: string;
            transaction_type: components["schemas"]["TransactionTypeEnum"];
            description?: string | null;
            account: number;
            period: number;
            category?: number | null;
            tax_rate?: number | null;
        };
        /**
         * @description * `income` - Income
         *     * `expense` - Expense
         * @enum {string}
         */
        TransactionTypeEnum: "income" | "expense";
        /**
         * @description * `CL` - Contact Lenses
         *     * `SL` - Spectacle Lenses
         *     * `SG` - Sunglasses
         *     * `EW` - Eyewear
         *     * `AX` - Accessories
         *     * `OT` - Other
         *     * `DV` - Devices
         * @enum {string}
         */
        TypeEnum: "CL" | "SL" | "SG" | "EW" | "AX" | "OT" | "DV";
        Unauthorized: {
            error: string;
        };
        User: {
            readonly id: number;
            username: string;
            /** Format: email */
            email: string;
            first_name: string;
            last_name: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /**
             * Staff status
             * @description Designates whether the user can log into this admin site.
             */
            is_staff?: boolean;
            readonly role: components["schemas"]["Role"];
            is_deleted?: boolean;
            /** Format: date-time */
            readonly deleted_at: string | null;
            phone: string;
            readonly client: number | null;
        };
        UserRequest: {
            username: string;
            /** Format: email */
            email: string;
            first_name: string;
            last_name: string;
            role_id: number;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /**
             * Staff status
             * @description Designates whether the user can log into this admin site.
             */
            is_staff?: boolean;
            password: string;
            is_deleted?: boolean;
            phone: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    accounting_accounts_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"][];
                };
            };
        };
    };
    accounting_accounts_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AccountRequest"];
                "multipart/form-data": components["schemas"]["AccountRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
        };
    };
    accounting_accounts_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this account. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
        };
    };
    accounting_accounts_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this account. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AccountRequest"];
                "multipart/form-data": components["schemas"]["AccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
        };
    };
    accounting_accounts_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this account. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accounting_accounts_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this account. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAccountRequest"];
                "multipart/form-data": components["schemas"]["PatchedAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
        };
    };
    accounting_categories_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"][];
                };
            };
        };
    };
    accounting_categories_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CategoryRequest"];
                "multipart/form-data": components["schemas"]["CategoryRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    accounting_categories_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    accounting_categories_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CategoryRequest"];
                "multipart/form-data": components["schemas"]["CategoryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    accounting_categories_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accounting_categories_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCategoryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCategoryRequest"];
                "multipart/form-data": components["schemas"]["PatchedCategoryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    accounting_financial_periods_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinancialPeriod"][];
                };
            };
        };
    };
    accounting_financial_periods_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FinancialPeriodRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["FinancialPeriodRequest"];
                "multipart/form-data": components["schemas"]["FinancialPeriodRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinancialPeriod"];
                };
            };
        };
    };
    accounting_financial_periods_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this financial period. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinancialPeriod"];
                };
            };
        };
    };
    accounting_financial_periods_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this financial period. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FinancialPeriodRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["FinancialPeriodRequest"];
                "multipart/form-data": components["schemas"]["FinancialPeriodRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinancialPeriod"];
                };
            };
        };
    };
    accounting_financial_periods_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this financial period. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accounting_financial_periods_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this financial period. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedFinancialPeriodRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedFinancialPeriodRequest"];
                "multipart/form-data": components["schemas"]["PatchedFinancialPeriodRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinancialPeriod"];
                };
            };
        };
    };
    accounting_journal_entries_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalEntry"][];
                };
            };
        };
    };
    accounting_journal_entries_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JournalEntryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JournalEntryRequest"];
                "multipart/form-data": components["schemas"]["JournalEntryRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalEntry"];
                };
            };
        };
    };
    accounting_journal_entries_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this journal entry. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalEntry"];
                };
            };
        };
    };
    accounting_journal_entries_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this journal entry. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JournalEntryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JournalEntryRequest"];
                "multipart/form-data": components["schemas"]["JournalEntryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalEntry"];
                };
            };
        };
    };
    accounting_journal_entries_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this journal entry. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accounting_journal_entries_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this journal entry. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedJournalEntryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedJournalEntryRequest"];
                "multipart/form-data": components["schemas"]["PatchedJournalEntryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalEntry"];
                };
            };
        };
    };
    accounting_recurring_transactions_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurringTransaction"][];
                };
            };
        };
    };
    accounting_recurring_transactions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecurringTransactionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RecurringTransactionRequest"];
                "multipart/form-data": components["schemas"]["RecurringTransactionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurringTransaction"];
                };
            };
        };
    };
    accounting_recurring_transactions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this recurring transaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurringTransaction"];
                };
            };
        };
    };
    accounting_recurring_transactions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this recurring transaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecurringTransactionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RecurringTransactionRequest"];
                "multipart/form-data": components["schemas"]["RecurringTransactionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurringTransaction"];
                };
            };
        };
    };
    accounting_recurring_transactions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this recurring transaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accounting_recurring_transactions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this recurring transaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRecurringTransactionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedRecurringTransactionRequest"];
                "multipart/form-data": components["schemas"]["PatchedRecurringTransactionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurringTransaction"];
                };
            };
        };
    };
    accounting_taxes_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tax"][];
                };
            };
        };
    };
    accounting_taxes_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaxRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TaxRequest"];
                "multipart/form-data": components["schemas"]["TaxRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tax"];
                };
            };
        };
    };
    accounting_taxes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tax. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tax"];
                };
            };
        };
    };
    accounting_taxes_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tax. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaxRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TaxRequest"];
                "multipart/form-data": components["schemas"]["TaxRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tax"];
                };
            };
        };
    };
    accounting_taxes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tax. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accounting_taxes_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tax. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTaxRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTaxRequest"];
                "multipart/form-data": components["schemas"]["PatchedTaxRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tax"];
                };
            };
        };
    };
    accounting_transactions_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"][];
                };
            };
        };
    };
    accounting_transactions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransactionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TransactionRequest"];
                "multipart/form-data": components["schemas"]["TransactionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    accounting_transactions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this transaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    accounting_transactions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this transaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransactionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TransactionRequest"];
                "multipart/form-data": components["schemas"]["TransactionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    accounting_transactions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this transaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accounting_transactions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this transaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTransactionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTransactionRequest"];
                "multipart/form-data": components["schemas"]["PatchedTransactionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    branches_branch_users_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchUsers"][];
                };
            };
        };
    };
    branches_branch_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BranchUsersRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BranchUsersRequest"];
                "multipart/form-data": components["schemas"]["BranchUsersRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchUsers"];
                };
            };
        };
    };
    branches_branch_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this branch users. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchUsers"];
                };
            };
        };
    };
    branches_branch_users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this branch users. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BranchUsersRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BranchUsersRequest"];
                "multipart/form-data": components["schemas"]["BranchUsersRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchUsers"];
                };
            };
        };
    };
    branches_branch_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this branch users. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    branches_branch_users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this branch users. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBranchUsersRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBranchUsersRequest"];
                "multipart/form-data": components["schemas"]["PatchedBranchUsersRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchUsers"];
                };
            };
        };
    };
    branches_branches_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"][];
                };
            };
        };
    };
    branches_branches_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BranchRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BranchRequest"];
                "multipart/form-data": components["schemas"]["BranchRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"];
                };
            };
        };
    };
    branches_branches_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this branch. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"];
                };
            };
        };
    };
    branches_branches_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this branch. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BranchRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BranchRequest"];
                "multipart/form-data": components["schemas"]["BranchRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"];
                };
            };
        };
    };
    branches_branches_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this branch. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    branches_branches_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this branch. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBranchRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBranchRequest"];
                "multipart/form-data": components["schemas"]["PatchedBranchRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"];
                };
            };
        };
    };
    core_import_csv_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_campaigns_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"][];
                };
            };
        };
    };
    crm_campaigns_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CampaignRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CampaignRequest"];
                "multipart/form-data": components["schemas"]["CampaignRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
        };
    };
    crm_campaigns_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this campaign. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
        };
    };
    crm_campaigns_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this campaign. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CampaignRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CampaignRequest"];
                "multipart/form-data": components["schemas"]["CampaignRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
        };
    };
    crm_campaigns_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this campaign. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_campaigns_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this campaign. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCampaignRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCampaignRequest"];
                "multipart/form-data": components["schemas"]["PatchedCampaignRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
        };
    };
    crm_complaints_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Complaint"][];
                };
            };
        };
    };
    crm_complaints_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComplaintRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ComplaintRequest"];
                "multipart/form-data": components["schemas"]["ComplaintRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Complaint"];
                };
            };
        };
    };
    crm_complaints_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this complaint. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Complaint"];
                };
            };
        };
    };
    crm_complaints_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this complaint. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComplaintRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ComplaintRequest"];
                "multipart/form-data": components["schemas"]["ComplaintRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Complaint"];
                };
            };
        };
    };
    crm_complaints_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this complaint. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_complaints_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this complaint. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedComplaintRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedComplaintRequest"];
                "multipart/form-data": components["schemas"]["PatchedComplaintRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Complaint"];
                };
            };
        };
    };
    crm_contact_us_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contact"][];
                };
            };
        };
    };
    crm_contact_us_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ContactRequest"];
                "multipart/form-data": components["schemas"]["ContactRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contact"];
                };
            };
        };
    };
    crm_contact_us_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contact. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contact"];
                };
            };
        };
    };
    crm_contact_us_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contact. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ContactRequest"];
                "multipart/form-data": components["schemas"]["ContactRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contact"];
                };
            };
        };
    };
    crm_contact_us_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contact. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_contact_us_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contact. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedContactRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedContactRequest"];
                "multipart/form-data": components["schemas"]["PatchedContactRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contact"];
                };
            };
        };
    };
    crm_customer_groups_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerGroup"][];
                };
            };
        };
    };
    crm_customer_groups_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomerGroupRequest"];
                "multipart/form-data": components["schemas"]["CustomerGroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerGroup"];
                };
            };
        };
    };
    crm_customer_groups_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Customer Group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerGroup"];
                };
            };
        };
    };
    crm_customer_groups_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Customer Group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomerGroupRequest"];
                "multipart/form-data": components["schemas"]["CustomerGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerGroup"];
                };
            };
        };
    };
    crm_customer_groups_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Customer Group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_customer_groups_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Customer Group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCustomerGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCustomerGroupRequest"];
                "multipart/form-data": components["schemas"]["PatchedCustomerGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerGroup"];
                };
            };
        };
    };
    crm_customers_list: {
        parameters: {
            query?: {
                customer_type?: string;
                email?: string;
                first_name?: string;
                last_name?: string;
                phone?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"][];
                };
            };
        };
    };
    crm_customers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomerRequest"];
                "multipart/form-data": components["schemas"]["CustomerRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
        };
    };
    crm_customers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this customer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
        };
    };
    crm_customers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this customer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomerRequest"];
                "multipart/form-data": components["schemas"]["CustomerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
        };
    };
    crm_customers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this customer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_customers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this customer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCustomerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCustomerRequest"];
                "multipart/form-data": components["schemas"]["PatchedCustomerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
        };
    };
    crm_documents_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"][];
                };
            };
        };
    };
    crm_documents_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DocumentRequest"];
                "multipart/form-data": components["schemas"]["DocumentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    crm_documents_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    crm_documents_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DocumentRequest"];
                "multipart/form-data": components["schemas"]["DocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    crm_documents_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_documents_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDocumentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedDocumentRequest"];
                "multipart/form-data": components["schemas"]["PatchedDocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    crm_interactions_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Interaction"][];
                };
            };
        };
    };
    crm_interactions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InteractionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InteractionRequest"];
                "multipart/form-data": components["schemas"]["InteractionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Interaction"];
                };
            };
        };
    };
    crm_interactions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this interaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Interaction"];
                };
            };
        };
    };
    crm_interactions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this interaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InteractionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InteractionRequest"];
                "multipart/form-data": components["schemas"]["InteractionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Interaction"];
                };
            };
        };
    };
    crm_interactions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this interaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_interactions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this interaction. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedInteractionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedInteractionRequest"];
                "multipart/form-data": components["schemas"]["PatchedInteractionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Interaction"];
                };
            };
        };
    };
    crm_opportunities_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Opportunity"][];
                };
            };
        };
    };
    crm_opportunities_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpportunityRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OpportunityRequest"];
                "multipart/form-data": components["schemas"]["OpportunityRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Opportunity"];
                };
            };
        };
    };
    crm_opportunities_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this opportunity. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Opportunity"];
                };
            };
        };
    };
    crm_opportunities_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this opportunity. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpportunityRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OpportunityRequest"];
                "multipart/form-data": components["schemas"]["OpportunityRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Opportunity"];
                };
            };
        };
    };
    crm_opportunities_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this opportunity. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_opportunities_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this opportunity. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOpportunityRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOpportunityRequest"];
                "multipart/form-data": components["schemas"]["PatchedOpportunityRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Opportunity"];
                };
            };
        };
    };
    crm_subscriptions_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subscription"][];
                };
            };
        };
    };
    crm_subscriptions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubscriptionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRequest"];
                "multipart/form-data": components["schemas"]["SubscriptionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subscription"];
                };
            };
        };
    };
    crm_subscriptions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Subscription. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subscription"];
                };
            };
        };
    };
    crm_subscriptions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Subscription. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubscriptionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRequest"];
                "multipart/form-data": components["schemas"]["SubscriptionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subscription"];
                };
            };
        };
    };
    crm_subscriptions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Subscription. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_subscriptions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Subscription. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSubscriptionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSubscriptionRequest"];
                "multipart/form-data": components["schemas"]["PatchedSubscriptionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subscription"];
                };
            };
        };
    };
    crm_tasks_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
        };
    };
    crm_tasks_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskRequest"];
                "multipart/form-data": components["schemas"]["TaskRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    crm_tasks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this task. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    crm_tasks_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this task. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskRequest"];
                "multipart/form-data": components["schemas"]["TaskRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    crm_tasks_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this task. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crm_tasks_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this task. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTaskRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTaskRequest"];
                "multipart/form-data": components["schemas"]["PatchedTaskRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    hrm_attendances_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attendance"][];
                };
            };
        };
    };
    hrm_attendances_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttendanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AttendanceRequest"];
                "multipart/form-data": components["schemas"]["AttendanceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attendance"];
                };
            };
        };
    };
    hrm_attendances_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attendance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attendance"];
                };
            };
        };
    };
    hrm_attendances_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attendance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttendanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AttendanceRequest"];
                "multipart/form-data": components["schemas"]["AttendanceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attendance"];
                };
            };
        };
    };
    hrm_attendances_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attendance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hrm_attendances_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attendance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAttendanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAttendanceRequest"];
                "multipart/form-data": components["schemas"]["PatchedAttendanceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attendance"];
                };
            };
        };
    };
    hrm_departments_list: {
        parameters: {
            query?: {
                description?: string;
                location?: string;
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Department"][];
                };
            };
        };
    };
    hrm_departments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DepartmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DepartmentRequest"];
                "multipart/form-data": components["schemas"]["DepartmentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Department"];
                };
            };
        };
    };
    hrm_departments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this department. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Department"];
                };
            };
        };
    };
    hrm_departments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this department. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DepartmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DepartmentRequest"];
                "multipart/form-data": components["schemas"]["DepartmentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Department"];
                };
            };
        };
    };
    hrm_departments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this department. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hrm_departments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this department. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDepartmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedDepartmentRequest"];
                "multipart/form-data": components["schemas"]["PatchedDepartmentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Department"];
                };
            };
        };
    };
    hrm_employee_form_options_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hrm_employees_list: {
        parameters: {
            query?: {
                department?: string;
                hire_date_after?: string;
                hire_date_before?: string;
                phone?: string;
                /** @description * `manager` - Manager
                 *     * `employee` - Employee
                 *     * `hr` - HR
                 *     * `admin` - Admin
                 *     * `accountant` - Accountant
                 *     * `marketing` - Marketing
                 *     * `sales` - Sales
                 *     * `delivery` - Delivery
                 *     * `customer_service` - Customer Service */
                position?: ("accountant" | "admin" | "customer_service" | "delivery" | "employee" | "hr" | "manager" | "marketing" | "sales")[];
                /** @description Max Salary */
                salary_max?: number;
                /** @description Min Salary */
                salary_min?: number;
                /** @description Username */
                user__username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employee"][];
                };
            };
        };
    };
    hrm_employees_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmployeeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EmployeeRequest"];
                "multipart/form-data": components["schemas"]["EmployeeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employee"];
                };
            };
        };
    };
    hrm_employees_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this employee. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employee"];
                };
            };
        };
    };
    hrm_employees_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this employee. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmployeeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EmployeeRequest"];
                "multipart/form-data": components["schemas"]["EmployeeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employee"];
                };
            };
        };
    };
    hrm_employees_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this employee. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hrm_employees_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this employee. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEmployeeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedEmployeeRequest"];
                "multipart/form-data": components["schemas"]["PatchedEmployeeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employee"];
                };
            };
        };
    };
    hrm_leaves_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Leave"][];
                };
            };
        };
    };
    hrm_leaves_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeaveRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LeaveRequest"];
                "multipart/form-data": components["schemas"]["LeaveRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Leave"];
                };
            };
        };
    };
    hrm_leaves_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this leave. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Leave"];
                };
            };
        };
    };
    hrm_leaves_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this leave. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeaveRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LeaveRequest"];
                "multipart/form-data": components["schemas"]["LeaveRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Leave"];
                };
            };
        };
    };
    hrm_leaves_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this leave. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hrm_leaves_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this leave. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedLeaveRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedLeaveRequest"];
                "multipart/form-data": components["schemas"]["PatchedLeaveRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Leave"];
                };
            };
        };
    };
    hrm_notifications_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"][];
                };
            };
        };
    };
    hrm_notifications_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["NotificationRequest"];
                "multipart/form-data": components["schemas"]["NotificationRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    hrm_notifications_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this notification. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    hrm_notifications_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this notification. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["NotificationRequest"];
                "multipart/form-data": components["schemas"]["NotificationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    hrm_notifications_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this notification. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hrm_notifications_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this notification. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedNotificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedNotificationRequest"];
                "multipart/form-data": components["schemas"]["PatchedNotificationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    hrm_payrolls_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payroll"][];
                };
            };
        };
    };
    hrm_payrolls_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PayrollRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PayrollRequest"];
                "multipart/form-data": components["schemas"]["PayrollRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payroll"];
                };
            };
        };
    };
    hrm_payrolls_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payroll. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payroll"];
                };
            };
        };
    };
    hrm_payrolls_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payroll. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PayrollRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PayrollRequest"];
                "multipart/form-data": components["schemas"]["PayrollRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payroll"];
                };
            };
        };
    };
    hrm_payrolls_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payroll. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hrm_payrolls_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payroll. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPayrollRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPayrollRequest"];
                "multipart/form-data": components["schemas"]["PatchedPayrollRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payroll"];
                };
            };
        };
    };
    hrm_performance_reviews_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceReview"][];
                };
            };
        };
    };
    hrm_performance_reviews_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PerformanceReviewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PerformanceReviewRequest"];
                "multipart/form-data": components["schemas"]["PerformanceReviewRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceReview"];
                };
            };
        };
    };
    hrm_performance_reviews_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this performance review. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceReview"];
                };
            };
        };
    };
    hrm_performance_reviews_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this performance review. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PerformanceReviewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PerformanceReviewRequest"];
                "multipart/form-data": components["schemas"]["PerformanceReviewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceReview"];
                };
            };
        };
    };
    hrm_performance_reviews_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this performance review. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hrm_performance_reviews_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this performance review. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPerformanceReviewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPerformanceReviewRequest"];
                "multipart/form-data": components["schemas"]["PatchedPerformanceReviewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceReview"];
                };
            };
        };
    };
    hrm_tasks_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
        };
    };
    hrm_tasks_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskRequest"];
                "multipart/form-data": components["schemas"]["TaskRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    hrm_tasks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this task. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    hrm_tasks_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this task. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskRequest"];
                "multipart/form-data": components["schemas"]["TaskRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    hrm_tasks_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this task. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hrm_tasks_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this task. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTaskRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTaskRequest"];
                "multipart/form-data": components["schemas"]["PatchedTaskRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    prescriptions_prescription_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrescriptionRecord"][];
                };
            };
        };
    };
    prescriptions_prescription_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrescriptionRecordRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PrescriptionRecordRequest"];
                "multipart/form-data": components["schemas"]["PrescriptionRecordRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrescriptionRecord"];
                };
            };
        };
    };
    prescriptions_prescription_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this prescription record. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrescriptionRecord"];
                };
            };
        };
    };
    prescriptions_prescription_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this prescription record. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrescriptionRecordRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PrescriptionRecordRequest"];
                "multipart/form-data": components["schemas"]["PrescriptionRecordRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrescriptionRecord"];
                };
            };
        };
    };
    prescriptions_prescription_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this prescription record. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    prescriptions_prescription_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this prescription record. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPrescriptionRecordRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPrescriptionRecordRequest"];
                "multipart/form-data": components["schemas"]["PatchedPrescriptionRecordRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrescriptionRecord"];
                };
            };
        };
    };
    products_answers_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantAnswer"][];
                };
            };
        };
    };
    products_answers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantAnswerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantAnswerRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantAnswerRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantAnswer"];
                };
            };
        };
    };
    products_answers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant answer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantAnswer"];
                };
            };
        };
    };
    products_answers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant answer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantAnswerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantAnswerRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantAnswerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantAnswer"];
                };
            };
        };
    };
    products_answers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant answer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_answers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant answer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProductVariantAnswerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProductVariantAnswerRequest"];
                "multipart/form-data": components["schemas"]["PatchedProductVariantAnswerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantAnswer"];
                };
            };
        };
    };
    products_attribute_values_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttributeValue"][];
                };
            };
        };
    };
    products_attribute_values_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttributeValueRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AttributeValueRequest"];
                "multipart/form-data": components["schemas"]["AttributeValueRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttributeValue"];
                };
            };
        };
    };
    products_attribute_values_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attribute value. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttributeValue"];
                };
            };
        };
    };
    products_attribute_values_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attribute value. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttributeValueRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AttributeValueRequest"];
                "multipart/form-data": components["schemas"]["AttributeValueRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttributeValue"];
                };
            };
        };
    };
    products_attribute_values_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attribute value. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_attribute_values_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attribute value. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAttributeValueRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAttributeValueRequest"];
                "multipart/form-data": components["schemas"]["PatchedAttributeValueRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttributeValue"];
                };
            };
        };
    };
    products_attributes_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attributes"][];
                };
            };
        };
    };
    products_attributes_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttributesRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AttributesRequest"];
                "multipart/form-data": components["schemas"]["AttributesRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attributes"];
                };
            };
        };
    };
    products_attributes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attributes. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attributes"];
                };
            };
        };
    };
    products_attributes_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attributes. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttributesRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AttributesRequest"];
                "multipart/form-data": components["schemas"]["AttributesRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attributes"];
                };
            };
        };
    };
    products_attributes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attributes. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_attributes_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attributes. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAttributesRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAttributesRequest"];
                "multipart/form-data": components["schemas"]["PatchedAttributesRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attributes"];
                };
            };
        };
    };
    products_brands_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"][];
                };
            };
        };
    };
    products_brands_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BrandRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BrandRequest"];
                "multipart/form-data": components["schemas"]["BrandRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"];
                };
            };
        };
    };
    products_brands_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Brand. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"];
                };
            };
        };
    };
    products_brands_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Brand. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BrandRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BrandRequest"];
                "multipart/form-data": components["schemas"]["BrandRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"];
                };
            };
        };
    };
    products_brands_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Brand. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_brands_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Brand. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBrandRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBrandRequest"];
                "multipart/form-data": components["schemas"]["PatchedBrandRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"];
                };
            };
        };
    };
    products_categories_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"][];
                };
            };
        };
    };
    products_categories_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CategoryRequest"];
                "multipart/form-data": components["schemas"]["CategoryRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    products_categories_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    products_categories_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CategoryRequest"];
                "multipart/form-data": components["schemas"]["CategoryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    products_categories_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_categories_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCategoryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCategoryRequest"];
                "multipart/form-data": components["schemas"]["PatchedCategoryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    products_flexible_prices_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlexiblePrice"][];
                };
            };
        };
    };
    products_flexible_prices_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlexiblePriceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["FlexiblePriceRequest"];
                "multipart/form-data": components["schemas"]["FlexiblePriceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlexiblePrice"];
                };
            };
        };
    };
    products_flexible_prices_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this flexible price. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlexiblePrice"];
                };
            };
        };
    };
    products_flexible_prices_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this flexible price. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlexiblePriceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["FlexiblePriceRequest"];
                "multipart/form-data": components["schemas"]["FlexiblePriceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlexiblePrice"];
                };
            };
        };
    };
    products_flexible_prices_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this flexible price. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_flexible_prices_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this flexible price. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedFlexiblePriceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedFlexiblePriceRequest"];
                "multipart/form-data": components["schemas"]["PatchedFlexiblePriceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlexiblePrice"];
                };
            };
        };
    };
    products_lens_coatings_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LensCoating"][];
                };
            };
        };
    };
    products_lens_coatings_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LensCoatingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LensCoatingRequest"];
                "multipart/form-data": components["schemas"]["LensCoatingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LensCoating"];
                };
            };
        };
    };
    products_lens_coatings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this lens coating. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LensCoating"];
                };
            };
        };
    };
    products_lens_coatings_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this lens coating. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LensCoatingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LensCoatingRequest"];
                "multipart/form-data": components["schemas"]["LensCoatingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LensCoating"];
                };
            };
        };
    };
    products_lens_coatings_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this lens coating. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_lens_coatings_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this lens coating. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedLensCoatingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedLensCoatingRequest"];
                "multipart/form-data": components["schemas"]["PatchedLensCoatingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LensCoating"];
                };
            };
        };
    };
    products_manufacturers_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Manufacturer"][];
                };
            };
        };
    };
    products_manufacturers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ManufacturerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ManufacturerRequest"];
                "multipart/form-data": components["schemas"]["ManufacturerRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Manufacturer"];
                };
            };
        };
    };
    products_manufacturers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Manufacturer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Manufacturer"];
                };
            };
        };
    };
    products_manufacturers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Manufacturer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ManufacturerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ManufacturerRequest"];
                "multipart/form-data": components["schemas"]["ManufacturerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Manufacturer"];
                };
            };
        };
    };
    products_manufacturers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Manufacturer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_manufacturers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Manufacturer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedManufacturerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedManufacturerRequest"];
                "multipart/form-data": components["schemas"]["PatchedManufacturerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Manufacturer"];
                };
            };
        };
    };
    products_marketing_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantMarketing"][];
                };
            };
        };
    };
    products_marketing_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantMarketingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantMarketingRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantMarketingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantMarketing"];
                };
            };
        };
    };
    products_marketing_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant marketing. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantMarketing"];
                };
            };
        };
    };
    products_marketing_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant marketing. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantMarketingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantMarketingRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantMarketingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantMarketing"];
                };
            };
        };
    };
    products_marketing_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant marketing. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_marketing_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant marketing. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProductVariantMarketingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProductVariantMarketingRequest"];
                "multipart/form-data": components["schemas"]["PatchedProductVariantMarketingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantMarketing"];
                };
            };
        };
    };
    products_offers_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantOffer"][];
                };
            };
        };
    };
    products_offers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantOfferRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantOfferRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantOfferRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantOffer"];
                };
            };
        };
    };
    products_offers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantOffer"];
                };
            };
        };
    };
    products_offers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantOfferRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantOfferRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantOfferRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantOffer"];
                };
            };
        };
    };
    products_offers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_offers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant offer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProductVariantOfferRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProductVariantOfferRequest"];
                "multipart/form-data": components["schemas"]["PatchedProductVariantOfferRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantOffer"];
                };
            };
        };
    };
    products_product_images_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductImage"][];
                };
            };
        };
    };
    products_product_images_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductImageRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductImageRequest"];
                "multipart/form-data": components["schemas"]["ProductImageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductImage"];
                };
            };
        };
    };
    products_product_images_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product image. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductImage"];
                };
            };
        };
    };
    products_product_images_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product image. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductImageRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductImageRequest"];
                "multipart/form-data": components["schemas"]["ProductImageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductImage"];
                };
            };
        };
    };
    products_product_images_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product image. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_product_images_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product image. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProductImageRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProductImageRequest"];
                "multipart/form-data": components["schemas"]["PatchedProductImageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductImage"];
                };
            };
        };
    };
    products_products_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"][];
                };
            };
        };
    };
    products_products_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductRequest"];
                "multipart/form-data": components["schemas"]["ProductRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    products_products_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    products_products_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductRequest"];
                "multipart/form-data": components["schemas"]["ProductRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    products_products_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_products_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProductRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProductRequest"];
                "multipart/form-data": components["schemas"]["PatchedProductRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    products_questions_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantQuestion"][];
                };
            };
        };
    };
    products_questions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantQuestionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantQuestionRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantQuestionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantQuestion"];
                };
            };
        };
    };
    products_questions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant question. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantQuestion"];
                };
            };
        };
    };
    products_questions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant question. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantQuestionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantQuestionRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantQuestionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantQuestion"];
                };
            };
        };
    };
    products_questions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant question. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_questions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant question. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProductVariantQuestionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProductVariantQuestionRequest"];
                "multipart/form-data": components["schemas"]["PatchedProductVariantQuestionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantQuestion"];
                };
            };
        };
    };
    products_reviews_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantReview"][];
                };
            };
        };
    };
    products_reviews_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantReviewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantReviewRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantReviewRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantReview"];
                };
            };
        };
    };
    products_reviews_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant review. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantReview"];
                };
            };
        };
    };
    products_reviews_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant review. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantReviewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantReviewRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantReviewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantReview"];
                };
            };
        };
    };
    products_reviews_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant review. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_reviews_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this product variant review. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProductVariantReviewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProductVariantReviewRequest"];
                "multipart/form-data": components["schemas"]["PatchedProductVariantReviewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariantReview"];
                };
            };
        };
    };
    products_stock_movements_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockMovements"][];
                };
            };
        };
    };
    products_stock_movements_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StockMovementsRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StockMovementsRequest"];
                "multipart/form-data": components["schemas"]["StockMovementsRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockMovements"];
                };
            };
        };
    };
    products_stock_movements_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock movements. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockMovements"];
                };
            };
        };
    };
    products_stock_movements_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock movements. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StockMovementsRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StockMovementsRequest"];
                "multipart/form-data": components["schemas"]["StockMovementsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockMovements"];
                };
            };
        };
    };
    products_stock_movements_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock movements. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_stock_movements_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock movements. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedStockMovementsRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedStockMovementsRequest"];
                "multipart/form-data": components["schemas"]["PatchedStockMovementsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockMovements"];
                };
            };
        };
    };
    products_stock_transfer_items_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransferItem"][];
                };
            };
        };
    };
    products_stock_transfer_items_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StockTransferItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StockTransferItemRequest"];
                "multipart/form-data": components["schemas"]["StockTransferItemRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransferItem"];
                };
            };
        };
    };
    products_stock_transfer_items_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock transfer item. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransferItem"];
                };
            };
        };
    };
    products_stock_transfer_items_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock transfer item. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StockTransferItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StockTransferItemRequest"];
                "multipart/form-data": components["schemas"]["StockTransferItemRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransferItem"];
                };
            };
        };
    };
    products_stock_transfer_items_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock transfer item. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_stock_transfer_items_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock transfer item. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedStockTransferItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedStockTransferItemRequest"];
                "multipart/form-data": components["schemas"]["PatchedStockTransferItemRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransferItem"];
                };
            };
        };
    };
    products_stock_transfers_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransfer"][];
                };
            };
        };
    };
    products_stock_transfers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StockTransferRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StockTransferRequest"];
                "multipart/form-data": components["schemas"]["StockTransferRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransfer"];
                };
            };
        };
    };
    products_stock_transfers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock transfer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransfer"];
                };
            };
        };
    };
    products_stock_transfers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock transfer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StockTransferRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StockTransferRequest"];
                "multipart/form-data": components["schemas"]["StockTransferRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransfer"];
                };
            };
        };
    };
    products_stock_transfers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock transfer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_stock_transfers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stock transfer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedStockTransferRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedStockTransferRequest"];
                "multipart/form-data": components["schemas"]["PatchedStockTransferRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransfer"];
                };
            };
        };
    };
    products_stocks_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stocks"][];
                };
            };
        };
    };
    products_stocks_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StocksRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StocksRequest"];
                "multipart/form-data": components["schemas"]["StocksRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stocks"];
                };
            };
        };
    };
    products_stocks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stocks. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stocks"];
                };
            };
        };
    };
    products_stocks_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stocks. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StocksRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StocksRequest"];
                "multipart/form-data": components["schemas"]["StocksRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stocks"];
                };
            };
        };
    };
    products_stocks_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stocks. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_stocks_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this stocks. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedStocksRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedStocksRequest"];
                "multipart/form-data": components["schemas"]["PatchedStocksRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stocks"];
                };
            };
        };
    };
    products_suppliers_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Supplier"][];
                };
            };
        };
    };
    products_suppliers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SupplierRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SupplierRequest"];
                "multipart/form-data": components["schemas"]["SupplierRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Supplier"];
                };
            };
        };
    };
    products_suppliers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Supplier. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Supplier"];
                };
            };
        };
    };
    products_suppliers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Supplier. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SupplierRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SupplierRequest"];
                "multipart/form-data": components["schemas"]["SupplierRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Supplier"];
                };
            };
        };
    };
    products_suppliers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Supplier. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_suppliers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Supplier. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSupplierRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSupplierRequest"];
                "multipart/form-data": components["schemas"]["PatchedSupplierRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Supplier"];
                };
            };
        };
    };
    products_variants_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariant"][];
                };
            };
        };
    };
    products_variants_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariant"];
                };
            };
        };
    };
    products_variants_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Product Variant. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariant"];
                };
            };
        };
    };
    products_variants_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Product Variant. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVariantRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductVariantRequest"];
                "multipart/form-data": components["schemas"]["ProductVariantRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariant"];
                };
            };
        };
    };
    products_variants_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Product Variant. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    products_variants_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Product Variant. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProductVariantRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProductVariantRequest"];
                "multipart/form-data": components["schemas"]["PatchedProductVariantRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductVariant"];
                };
            };
        };
    };
    sales_invoices_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"][];
                };
            };
        };
    };
    sales_invoices_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InvoiceRequest"];
                "multipart/form-data": components["schemas"]["InvoiceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_invoices_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_invoices_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InvoiceRequest"];
                "multipart/form-data": components["schemas"]["InvoiceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_invoices_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_invoices_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedInvoiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedInvoiceRequest"];
                "multipart/form-data": components["schemas"]["PatchedInvoiceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_invoices_calculate_totals_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InvoiceRequest"];
                "multipart/form-data": components["schemas"]["InvoiceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_invoices_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InvoiceRequest"];
                "multipart/form-data": components["schemas"]["InvoiceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_invoices_choices_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_orders_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"][];
                };
            };
        };
    };
    sales_orders_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_orders_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_orders_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_orders_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_orders_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrderRequest"];
                "multipart/form-data": components["schemas"]["PatchedOrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_orders_calculate_totals_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_orders_cancel_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_orders_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_orders_choices_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_payments_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"][];
                };
            };
        };
    };
    sales_payments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PaymentRequest"];
                "multipart/form-data": components["schemas"]["PaymentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    sales_payments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    sales_payments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PaymentRequest"];
                "multipart/form-data": components["schemas"]["PaymentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    sales_payments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_payments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPaymentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPaymentRequest"];
                "multipart/form-data": components["schemas"]["PatchedPaymentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    tenants_activate_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tenants_clients_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Client"][];
                };
            };
        };
    };
    tenants_clients_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ClientRequest"];
                "multipart/form-data": components["schemas"]["ClientRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Client"];
                };
            };
        };
    };
    tenants_clients_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Client"];
                };
            };
        };
    };
    tenants_clients_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ClientRequest"];
                "multipart/form-data": components["schemas"]["ClientRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Client"];
                };
            };
        };
    };
    tenants_clients_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tenants_clients_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedClientRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedClientRequest"];
                "multipart/form-data": components["schemas"]["PatchedClientRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Client"];
                };
            };
        };
    };
    tenants_create_payment_order_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tenants_domain_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tenants_payments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tenants_paypal_cancel_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tenants_paypal_execute_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tenants_paypal_webhook_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tenants_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tenants_subscription_plans_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionPlan"][];
                };
            };
        };
    };
    tenants_subscription_plans_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubscriptionPlanRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SubscriptionPlanRequest"];
                "multipart/form-data": components["schemas"]["SubscriptionPlanRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionPlan"];
                };
            };
        };
    };
    tenants_subscription_plans_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Subscription Plan. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionPlan"];
                };
            };
        };
    };
    tenants_subscription_plans_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Subscription Plan. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubscriptionPlanRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SubscriptionPlanRequest"];
                "multipart/form-data": components["schemas"]["SubscriptionPlanRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionPlan"];
                };
            };
        };
    };
    tenants_subscription_plans_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Subscription Plan. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tenants_subscription_plans_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Subscription Plan. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSubscriptionPlanRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSubscriptionPlanRequest"];
                "multipart/form-data": components["schemas"]["PatchedSubscriptionPlanRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionPlan"];
                };
            };
        };
    };
    users_contact_us_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactUs"][];
                };
            };
        };
    };
    users_contact_us_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactUsRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ContactUsRequest"];
                "multipart/form-data": components["schemas"]["ContactUsRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactUs"];
                };
            };
        };
    };
    users_contact_us_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contact us. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactUs"];
                };
            };
        };
    };
    users_contact_us_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contact us. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactUsRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ContactUsRequest"];
                "multipart/form-data": components["schemas"]["ContactUsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactUs"];
                };
            };
        };
    };
    users_contact_us_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contact us. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_contact_us_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contact us. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedContactUsRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedContactUsRequest"];
                "multipart/form-data": components["schemas"]["PatchedContactUsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactUs"];
                };
            };
        };
    };
    users_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LoginRequest"];
                "multipart/form-data": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginSuccessResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginBadRequest"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginForbidden"];
                };
            };
        };
    };
    users_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
                "application/x-www-form-urlencoded": {
                    [key: string]: unknown;
                };
                "multipart/form-data": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefreshError"];
                };
            };
        };
    };
    users_pages_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page"][];
                };
            };
        };
    };
    users_pages_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PageRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PageRequest"];
                "multipart/form-data": components["schemas"]["PageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page"];
                };
            };
        };
    };
    users_pages_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this page. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page"];
                };
            };
        };
    };
    users_pages_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this page. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PageRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PageRequest"];
                "multipart/form-data": components["schemas"]["PageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page"];
                };
            };
        };
    };
    users_pages_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this page. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_pages_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this page. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPageRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPageRequest"];
                "multipart/form-data": components["schemas"]["PatchedPageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page"];
                };
            };
        };
    };
    users_password_reset_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
                "application/x-www-form-urlencoded": {
                    [key: string]: unknown;
                };
                "multipart/form-data": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordResetSuccessResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordResetBadRequest"];
                };
            };
        };
    };
    users_password_reset_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_permissions_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Permission"][];
                };
            };
        };
    };
    users_permissions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PermissionRequest"];
                "multipart/form-data": components["schemas"]["PermissionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Permission"];
                };
            };
        };
    };
    users_permissions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Permission"];
                };
            };
        };
    };
    users_permissions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PermissionRequest"];
                "multipart/form-data": components["schemas"]["PermissionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Permission"];
                };
            };
        };
    };
    users_permissions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_permissions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPermissionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPermissionRequest"];
                "multipart/form-data": components["schemas"]["PatchedPermissionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Permission"];
                };
            };
        };
    };
    users_profile_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
        };
    };
    users_public_pages_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page"][];
                };
            };
        };
    };
    users_public_pages_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page"];
                };
            };
        };
    };
    users_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RegisterRequest"];
                "multipart/form-data": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterSuccessResponse"];
                };
            };
        };
    };
    users_role_permissions_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolePermission"][];
                };
            };
        };
    };
    users_role_permissions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RolePermissionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RolePermissionRequest"];
                "multipart/form-data": components["schemas"]["RolePermissionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolePermission"];
                };
            };
        };
    };
    users_role_permissions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this role permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolePermission"];
                };
            };
        };
    };
    users_role_permissions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this role permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RolePermissionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RolePermissionRequest"];
                "multipart/form-data": components["schemas"]["RolePermissionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolePermission"];
                };
            };
        };
    };
    users_role_permissions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this role permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_role_permissions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this role permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRolePermissionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedRolePermissionRequest"];
                "multipart/form-data": components["schemas"]["PatchedRolePermissionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolePermission"];
                };
            };
        };
    };
    users_roles_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"][];
                };
            };
        };
    };
    users_roles_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoleRequest"];
                "multipart/form-data": components["schemas"]["RoleRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
        };
    };
    users_roles_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Role. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
        };
    };
    users_roles_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Role. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoleRequest"];
                "multipart/form-data": components["schemas"]["RoleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
        };
    };
    users_roles_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Role. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_roles_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Role. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRoleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedRoleRequest"];
                "multipart/form-data": components["schemas"]["PatchedRoleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
        };
    };
    users_tenant_settings_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantSettings"][];
                };
            };
        };
    };
    users_tenant_settings_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TenantSettingsRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TenantSettingsRequest"];
                "multipart/form-data": components["schemas"]["TenantSettingsRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantSettings"];
                };
            };
        };
    };
    users_tenant_settings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tenant settings. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantSettings"];
                };
            };
        };
    };
    users_tenant_settings_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tenant settings. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TenantSettingsRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TenantSettingsRequest"];
                "multipart/form-data": components["schemas"]["TenantSettingsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantSettings"];
                };
            };
        };
    };
    users_tenant_settings_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tenant settings. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_tenant_settings_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tenant settings. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTenantSettingsRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTenantSettingsRequest"];
                "multipart/form-data": components["schemas"]["PatchedTenantSettingsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantSettings"];
                };
            };
        };
    };
    users_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshTokenResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefreshError"];
                };
            };
        };
    };
    users_users_list: {
        parameters: {
            query?: {
                email?: string;
                phone?: string;
                role?: string;
                username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
        };
    };
    users_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequest"];
                "multipart/form-data": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequest"];
                "multipart/form-data": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserRequest"];
                "multipart/form-data": components["schemas"]["PatchedUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
}
