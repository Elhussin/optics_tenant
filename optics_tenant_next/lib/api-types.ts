/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/activate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["activate_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/csv/api/import-csv/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["csv_api_import_csv_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_api_invoices_list"];
        put?: never;
        post: operations["sales_api_invoices_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/invoices/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_api_invoices_retrieve"];
        put: operations["sales_api_invoices_update"];
        post?: never;
        delete: operations["sales_api_invoices_destroy"];
        options?: never;
        head?: never;
        patch: operations["sales_api_invoices_partial_update"];
        trace?: never;
    };
    "/sales/api/invoices/{id}/calculate_totals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sales_api_invoices_calculate_totals_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/invoices/{id}/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sales_api_invoices_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/invoices/choices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_api_invoices_choices_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/orders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_api_orders_list"];
        put?: never;
        post: operations["sales_api_orders_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/orders/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_api_orders_retrieve"];
        put: operations["sales_api_orders_update"];
        post?: never;
        delete: operations["sales_api_orders_destroy"];
        options?: never;
        head?: never;
        patch: operations["sales_api_orders_partial_update"];
        trace?: never;
    };
    "/sales/api/orders/{id}/calculate_totals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sales_api_orders_calculate_totals_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/orders/{id}/cancel/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sales_api_orders_cancel_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/orders/{id}/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sales_api_orders_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/orders/choices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_api_orders_choices_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_api_payments_list"];
        put?: never;
        post: operations["sales_api_payments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/api/payments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sales_api_payments_retrieve"];
        put: operations["sales_api_payments_update"];
        post?: never;
        delete: operations["sales_api_payments_destroy"];
        options?: never;
        head?: never;
        patch: operations["sales_api_payments_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Invoice: {
            readonly id: number;
            items: components["schemas"]["InvoiceItem"][];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            readonly subtotal: string;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            readonly tax_amount: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            readonly total_amount: string;
            /** Format: decimal */
            paid_amount?: string;
            readonly invoice_number: string;
            invoice_type?: components["schemas"]["InvoiceTypeEnum"];
            /** Format: date */
            due_date?: string | null;
            readonly status: components["schemas"]["InvoiceStatusEnum"];
            notes?: string | null;
            branch?: number | null;
            customer: number;
            readonly created_by: number | null;
            order?: number | null;
        };
        InvoiceItem: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity?: number;
            /** Format: decimal */
            unit_price: string;
            /** Format: decimal */
            readonly total_price: string;
            product_variant?: number | null;
            invoice: number;
        };
        InvoiceItemRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity?: number;
            /** Format: decimal */
            unit_price: string;
            product_variant?: number | null;
            invoice: number;
        };
        InvoiceRequest: {
            items: components["schemas"]["InvoiceItemRequest"][];
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            paid_amount?: string;
            invoice_type?: components["schemas"]["InvoiceTypeEnum"];
            /** Format: date */
            due_date?: string | null;
            notes?: string | null;
            branch?: number | null;
            customer: number;
            order?: number | null;
        };
        /**
         * @description * `draft` - Draft
         *     * `paid` - Paid
         *     * `partially_paid` - Partially Paid
         *     * `overdue` - Overdue
         *     * `confirmed` - Confirmed
         * @enum {string}
         */
        InvoiceStatusEnum: "draft" | "paid" | "partially_paid" | "overdue" | "confirmed";
        /**
         * @description * `purchase` - Purchase
         *     * `sale` - Sale
         *     * `return_purchase` - Return Purchase
         *     * `return_sale` - Return Sale
         * @enum {string}
         */
        InvoiceTypeEnum: "purchase" | "sale" | "return_purchase" | "return_sale";
        Order: {
            readonly id: number;
            items: components["schemas"]["OrderItem"][];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            readonly subtotal: string;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            readonly tax_amount: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            readonly total_amount: string;
            /** Format: decimal */
            paid_amount?: string;
            order_type?: components["schemas"]["OrderTypeEnum"];
            readonly order_number: string;
            status?: components["schemas"]["OrderStatusEnum"];
            payment_status?: components["schemas"]["PaymentStatusEnum"];
            payment_type?: components["schemas"]["PaymentTypeEnum"];
            notes?: string;
            internal_notes?: string;
            /** Format: date-time */
            readonly confirmed_at: string | null;
            /** Format: date-time */
            readonly delivered_at: string | null;
            /** Format: date-time */
            expected_delivery?: string | null;
            branch?: number | null;
            customer: number;
            sales_person?: number | null;
        };
        OrderItem: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity?: number;
            /** Format: decimal */
            unit_price: string;
            /** Format: decimal */
            readonly total_price: string;
            product_variant?: number | null;
            order: number;
            prescription?: number | null;
        };
        OrderItemRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            quantity?: number;
            /** Format: decimal */
            unit_price: string;
            product_variant?: number | null;
            order: number;
            prescription?: number | null;
        };
        OrderRequest: {
            items: components["schemas"]["OrderItemRequest"][];
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            paid_amount?: string;
            order_type?: components["schemas"]["OrderTypeEnum"];
            status?: components["schemas"]["OrderStatusEnum"];
            payment_status?: components["schemas"]["PaymentStatusEnum"];
            payment_type?: components["schemas"]["PaymentTypeEnum"];
            notes?: string;
            internal_notes?: string;
            /** Format: date-time */
            expected_delivery?: string | null;
            branch?: number | null;
            customer: number;
            sales_person?: number | null;
        };
        /**
         * @description * `pending` - pending
         *     * `confirmed` - confirmed
         *     * `ready` - ready
         *     * `delivered` - delivered
         *     * `cancelled` - cancelled
         * @enum {string}
         */
        OrderStatusEnum: "pending" | "confirmed" | "ready" | "delivered" | "cancelled";
        /**
         * @description * `cash` - cash
         *     * `credit` - credit
         *     * `insurance` - insurance
         * @enum {string}
         */
        OrderTypeEnum: "cash" | "credit" | "insurance";
        PatchedInvoiceRequest: {
            items?: components["schemas"]["InvoiceItemRequest"][];
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            paid_amount?: string;
            invoice_type?: components["schemas"]["InvoiceTypeEnum"];
            /** Format: date */
            due_date?: string | null;
            notes?: string | null;
            branch?: number | null;
            customer?: number;
            order?: number | null;
        };
        PatchedOrderRequest: {
            items?: components["schemas"]["OrderItemRequest"][];
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            tax_rate?: string;
            /** Format: decimal */
            discount_amount?: string;
            /** Format: decimal */
            paid_amount?: string;
            order_type?: components["schemas"]["OrderTypeEnum"];
            status?: components["schemas"]["OrderStatusEnum"];
            payment_status?: components["schemas"]["PaymentStatusEnum"];
            payment_type?: components["schemas"]["PaymentTypeEnum"];
            notes?: string;
            internal_notes?: string;
            /** Format: date-time */
            expected_delivery?: string | null;
            branch?: number | null;
            customer?: number;
            sales_person?: number | null;
        };
        PatchedPaymentRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            amount?: string;
            payment_method?: components["schemas"]["PaymentMethodEnum"];
            invoice?: number;
        };
        Payment: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            amount: string;
            payment_method: components["schemas"]["PaymentMethodEnum"];
            invoice: number;
        };
        /**
         * @description * `cash` - Cash
         *     * `card` - Card
         * @enum {string}
         */
        PaymentMethodEnum: "cash" | "card";
        PaymentRequest: {
            /** Active */
            is_active?: boolean;
            /** Deleted */
            is_deleted?: boolean;
            /** Format: decimal */
            amount: string;
            payment_method: components["schemas"]["PaymentMethodEnum"];
            invoice: number;
        };
        /**
         * @description * `pending` - Pending
         *     * `partial` - Partial
         *     * `paid` - Paid
         *     * `refunded` - Refunded
         *     * `disputed` - Disputed
         * @enum {string}
         */
        PaymentStatusEnum: "pending" | "partial" | "paid" | "refunded" | "disputed";
        /**
         * @description * `cash` - cash
         *     * `credit` - credit
         *     * `insurance` - insurance
         * @enum {string}
         */
        PaymentTypeEnum: "cash" | "credit" | "insurance";
        TokenObtainPair: {
            readonly access: string;
            readonly refresh: string;
        };
        TokenObtainPairRequest: {
            username: string;
            password: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        TokenRefreshRequest: {
            refresh: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    activate_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenObtainPairRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPairRequest"];
                "multipart/form-data": components["schemas"]["TokenObtainPairRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenObtainPair"];
                };
            };
        };
    };
    token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
                "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    csv_api_import_csv_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_api_invoices_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"][];
                };
            };
        };
    };
    sales_api_invoices_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InvoiceRequest"];
                "multipart/form-data": components["schemas"]["InvoiceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_api_invoices_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_api_invoices_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InvoiceRequest"];
                "multipart/form-data": components["schemas"]["InvoiceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_api_invoices_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_api_invoices_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedInvoiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedInvoiceRequest"];
                "multipart/form-data": components["schemas"]["PatchedInvoiceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_api_invoices_calculate_totals_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InvoiceRequest"];
                "multipart/form-data": components["schemas"]["InvoiceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_api_invoices_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this invoice. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["InvoiceRequest"];
                "multipart/form-data": components["schemas"]["InvoiceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
        };
    };
    sales_api_invoices_choices_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_api_orders_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"][];
                };
            };
        };
    };
    sales_api_orders_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_api_orders_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_api_orders_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_api_orders_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_api_orders_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrderRequest"];
                "multipart/form-data": components["schemas"]["PatchedOrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_api_orders_calculate_totals_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_api_orders_cancel_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_api_orders_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this order. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    sales_api_orders_choices_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_api_payments_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"][];
                };
            };
        };
    };
    sales_api_payments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PaymentRequest"];
                "multipart/form-data": components["schemas"]["PaymentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    sales_api_payments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    sales_api_payments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PaymentRequest"];
                "multipart/form-data": components["schemas"]["PaymentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    sales_api_payments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sales_api_payments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPaymentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPaymentRequest"];
                "multipart/form-data": components["schemas"]["PatchedPaymentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
}
